// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protobuf/obs.proto

package obs_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OBSClient is the client API for OBS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OBSClient interface {
	GetPersistentData(ctx context.Context, in *GetPersistentDataRequest, opts ...grpc.CallOption) (*GetPersistentDataResponse, error)
	SetPersistentData(ctx context.Context, in *SetPersistentDataRequest, opts ...grpc.CallOption) (*SetPersistentDataResponse, error)
	GetSceneCollectionList(ctx context.Context, in *GetSceneCollectionListRequest, opts ...grpc.CallOption) (*GetSceneCollectionListResponse, error)
	SetCurrentSceneCollection(ctx context.Context, in *SetCurrentSceneCollectionRequest, opts ...grpc.CallOption) (*SetCurrentSceneCollectionResponse, error)
	CreateSceneCollection(ctx context.Context, in *CreateSceneCollectionRequest, opts ...grpc.CallOption) (*CreateSceneCollectionResponse, error)
	GetProfileList(ctx context.Context, in *GetProfileListRequest, opts ...grpc.CallOption) (*GetProfileListResponse, error)
	SetCurrentProfile(ctx context.Context, in *SetCurrentProfileRequest, opts ...grpc.CallOption) (*SetCurrentProfileResponse, error)
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	RemoveProfile(ctx context.Context, in *RemoveProfileRequest, opts ...grpc.CallOption) (*RemoveProfileResponse, error)
	GetProfileParameter(ctx context.Context, in *GetProfileParameterRequest, opts ...grpc.CallOption) (*GetProfileParameterResponse, error)
	SetProfileParameter(ctx context.Context, in *SetProfileParameterRequest, opts ...grpc.CallOption) (*SetProfileParameterResponse, error)
	GetVideoSettings(ctx context.Context, in *GetVideoSettingsRequest, opts ...grpc.CallOption) (*GetVideoSettingsResponse, error)
	SetVideoSettings(ctx context.Context, in *SetVideoSettingsRequest, opts ...grpc.CallOption) (*SetVideoSettingsResponse, error)
	GetStreamServiceSettings(ctx context.Context, in *GetStreamServiceSettingsRequest, opts ...grpc.CallOption) (*GetStreamServiceSettingsResponse, error)
	SetStreamServiceSettings(ctx context.Context, in *SetStreamServiceSettingsRequest, opts ...grpc.CallOption) (*SetStreamServiceSettingsResponse, error)
	GetRecordDirectory(ctx context.Context, in *GetRecordDirectoryRequest, opts ...grpc.CallOption) (*GetRecordDirectoryResponse, error)
	SetRecordDirectory(ctx context.Context, in *SetRecordDirectoryRequest, opts ...grpc.CallOption) (*SetRecordDirectoryResponse, error)
	GetSourceFilterKindList(ctx context.Context, in *GetSourceFilterKindListRequest, opts ...grpc.CallOption) (*GetSourceFilterKindListResponse, error)
	GetSourceFilterList(ctx context.Context, in *GetSourceFilterListRequest, opts ...grpc.CallOption) (*GetSourceFilterListResponse, error)
	GetSourceFilterDefaultSettings(ctx context.Context, in *GetSourceFilterDefaultSettingsRequest, opts ...grpc.CallOption) (*GetSourceFilterDefaultSettingsResponse, error)
	CreateSourceFilter(ctx context.Context, in *CreateSourceFilterRequest, opts ...grpc.CallOption) (*CreateSourceFilterResponse, error)
	RemoveSourceFilter(ctx context.Context, in *RemoveSourceFilterRequest, opts ...grpc.CallOption) (*RemoveSourceFilterResponse, error)
	SetSourceFilterName(ctx context.Context, in *SetSourceFilterNameRequest, opts ...grpc.CallOption) (*SetSourceFilterNameResponse, error)
	GetSourceFilter(ctx context.Context, in *GetSourceFilterRequest, opts ...grpc.CallOption) (*GetSourceFilterResponse, error)
	SetSourceFilterIndex(ctx context.Context, in *SetSourceFilterIndexRequest, opts ...grpc.CallOption) (*SetSourceFilterIndexResponse, error)
	SetSourceFilterSettings(ctx context.Context, in *SetSourceFilterSettingsRequest, opts ...grpc.CallOption) (*SetSourceFilterSettingsResponse, error)
	SetSourceFilterEnabled(ctx context.Context, in *SetSourceFilterEnabledRequest, opts ...grpc.CallOption) (*SetSourceFilterEnabledResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	BroadcastCustomEvent(ctx context.Context, in *BroadcastCustomEventRequest, opts ...grpc.CallOption) (*BroadcastCustomEventResponse, error)
	CallVendorRequest(ctx context.Context, in *CallVendorRequestRequest, opts ...grpc.CallOption) (*CallVendorRequestResponse, error)
	GetHotkeyList(ctx context.Context, in *GetHotkeyListRequest, opts ...grpc.CallOption) (*GetHotkeyListResponse, error)
	TriggerHotkeyByName(ctx context.Context, in *TriggerHotkeyByNameRequest, opts ...grpc.CallOption) (*TriggerHotkeyByNameResponse, error)
	TriggerHotkeyByKeySequence(ctx context.Context, in *TriggerHotkeyByKeySequenceRequest, opts ...grpc.CallOption) (*TriggerHotkeyByKeySequenceResponse, error)
	Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error)
	GetInputList(ctx context.Context, in *GetInputListRequest, opts ...grpc.CallOption) (*GetInputListResponse, error)
	GetInputKindList(ctx context.Context, in *GetInputKindListRequest, opts ...grpc.CallOption) (*GetInputKindListResponse, error)
	GetSpecialInputs(ctx context.Context, in *GetSpecialInputsRequest, opts ...grpc.CallOption) (*GetSpecialInputsResponse, error)
	CreateInput(ctx context.Context, in *CreateInputRequest, opts ...grpc.CallOption) (*CreateInputResponse, error)
	RemoveInput(ctx context.Context, in *RemoveInputRequest, opts ...grpc.CallOption) (*RemoveInputResponse, error)
	SetInputName(ctx context.Context, in *SetInputNameRequest, opts ...grpc.CallOption) (*SetInputNameResponse, error)
	GetInputDefaultSettings(ctx context.Context, in *GetInputDefaultSettingsRequest, opts ...grpc.CallOption) (*GetInputDefaultSettingsResponse, error)
	GetInputSettings(ctx context.Context, in *GetInputSettingsRequest, opts ...grpc.CallOption) (*GetInputSettingsResponse, error)
	SetInputSettings(ctx context.Context, in *SetInputSettingsRequest, opts ...grpc.CallOption) (*SetInputSettingsResponse, error)
	GetInputMute(ctx context.Context, in *GetInputMuteRequest, opts ...grpc.CallOption) (*GetInputMuteResponse, error)
	SetInputMute(ctx context.Context, in *SetInputMuteRequest, opts ...grpc.CallOption) (*SetInputMuteResponse, error)
	ToggleInputMute(ctx context.Context, in *ToggleInputMuteRequest, opts ...grpc.CallOption) (*ToggleInputMuteResponse, error)
	GetInputVolume(ctx context.Context, in *GetInputVolumeRequest, opts ...grpc.CallOption) (*GetInputVolumeResponse, error)
	SetInputVolume(ctx context.Context, in *SetInputVolumeRequest, opts ...grpc.CallOption) (*SetInputVolumeResponse, error)
	GetInputAudioBalance(ctx context.Context, in *GetInputAudioBalanceRequest, opts ...grpc.CallOption) (*GetInputAudioBalanceResponse, error)
	SetInputAudioBalance(ctx context.Context, in *SetInputAudioBalanceRequest, opts ...grpc.CallOption) (*SetInputAudioBalanceResponse, error)
	GetInputAudioSyncOffset(ctx context.Context, in *GetInputAudioSyncOffsetRequest, opts ...grpc.CallOption) (*GetInputAudioSyncOffsetResponse, error)
	SetInputAudioSyncOffset(ctx context.Context, in *SetInputAudioSyncOffsetRequest, opts ...grpc.CallOption) (*SetInputAudioSyncOffsetResponse, error)
	GetInputAudioMonitorType(ctx context.Context, in *GetInputAudioMonitorTypeRequest, opts ...grpc.CallOption) (*GetInputAudioMonitorTypeResponse, error)
	SetInputAudioMonitorType(ctx context.Context, in *SetInputAudioMonitorTypeRequest, opts ...grpc.CallOption) (*SetInputAudioMonitorTypeResponse, error)
	GetInputAudioTracks(ctx context.Context, in *GetInputAudioTracksRequest, opts ...grpc.CallOption) (*GetInputAudioTracksResponse, error)
	SetInputAudioTracks(ctx context.Context, in *SetInputAudioTracksRequest, opts ...grpc.CallOption) (*SetInputAudioTracksResponse, error)
	GetInputPropertiesListPropertyItems(ctx context.Context, in *GetInputPropertiesListPropertyItemsRequest, opts ...grpc.CallOption) (*GetInputPropertiesListPropertyItemsResponse, error)
	PressInputPropertiesButton(ctx context.Context, in *PressInputPropertiesButtonRequest, opts ...grpc.CallOption) (*PressInputPropertiesButtonResponse, error)
	GetMediaInputStatus(ctx context.Context, in *GetMediaInputStatusRequest, opts ...grpc.CallOption) (*GetMediaInputStatusResponse, error)
	SetMediaInputCursor(ctx context.Context, in *SetMediaInputCursorRequest, opts ...grpc.CallOption) (*SetMediaInputCursorResponse, error)
	OffsetMediaInputCursor(ctx context.Context, in *OffsetMediaInputCursorRequest, opts ...grpc.CallOption) (*OffsetMediaInputCursorResponse, error)
	TriggerMediaInputAction(ctx context.Context, in *TriggerMediaInputActionRequest, opts ...grpc.CallOption) (*TriggerMediaInputActionResponse, error)
	GetVirtualCamStatus(ctx context.Context, in *GetVirtualCamStatusRequest, opts ...grpc.CallOption) (*GetVirtualCamStatusResponse, error)
	ToggleVirtualCam(ctx context.Context, in *ToggleVirtualCamRequest, opts ...grpc.CallOption) (*ToggleVirtualCamResponse, error)
	StartVirtualCam(ctx context.Context, in *StartVirtualCamRequest, opts ...grpc.CallOption) (*StartVirtualCamResponse, error)
	StopVirtualCam(ctx context.Context, in *StopVirtualCamRequest, opts ...grpc.CallOption) (*StopVirtualCamResponse, error)
	GetReplayBufferStatus(ctx context.Context, in *GetReplayBufferStatusRequest, opts ...grpc.CallOption) (*GetReplayBufferStatusResponse, error)
	ToggleReplayBuffer(ctx context.Context, in *ToggleReplayBufferRequest, opts ...grpc.CallOption) (*ToggleReplayBufferResponse, error)
	StartReplayBuffer(ctx context.Context, in *StartReplayBufferRequest, opts ...grpc.CallOption) (*StartReplayBufferResponse, error)
	StopReplayBuffer(ctx context.Context, in *StopReplayBufferRequest, opts ...grpc.CallOption) (*StopReplayBufferResponse, error)
	SaveReplayBuffer(ctx context.Context, in *SaveReplayBufferRequest, opts ...grpc.CallOption) (*SaveReplayBufferResponse, error)
	GetLastReplayBufferReplay(ctx context.Context, in *GetLastReplayBufferReplayRequest, opts ...grpc.CallOption) (*GetLastReplayBufferReplayResponse, error)
	GetOutputList(ctx context.Context, in *GetOutputListRequest, opts ...grpc.CallOption) (*GetOutputListResponse, error)
	GetOutputStatus(ctx context.Context, in *GetOutputStatusRequest, opts ...grpc.CallOption) (*GetOutputStatusResponse, error)
	ToggleOutput(ctx context.Context, in *ToggleOutputRequest, opts ...grpc.CallOption) (*ToggleOutputResponse, error)
	StartOutput(ctx context.Context, in *StartOutputRequest, opts ...grpc.CallOption) (*StartOutputResponse, error)
	StopOutput(ctx context.Context, in *StopOutputRequest, opts ...grpc.CallOption) (*StopOutputResponse, error)
	GetOutputSettings(ctx context.Context, in *GetOutputSettingsRequest, opts ...grpc.CallOption) (*GetOutputSettingsResponse, error)
	SetOutputSettings(ctx context.Context, in *SetOutputSettingsRequest, opts ...grpc.CallOption) (*SetOutputSettingsResponse, error)
	GetRecordStatus(ctx context.Context, in *GetRecordStatusRequest, opts ...grpc.CallOption) (*GetRecordStatusResponse, error)
	ToggleRecord(ctx context.Context, in *ToggleRecordRequest, opts ...grpc.CallOption) (*ToggleRecordResponse, error)
	StartRecord(ctx context.Context, in *StartRecordRequest, opts ...grpc.CallOption) (*StartRecordResponse, error)
	StopRecord(ctx context.Context, in *StopRecordRequest, opts ...grpc.CallOption) (*StopRecordResponse, error)
	ToggleRecordPause(ctx context.Context, in *ToggleRecordPauseRequest, opts ...grpc.CallOption) (*ToggleRecordPauseResponse, error)
	PauseRecord(ctx context.Context, in *PauseRecordRequest, opts ...grpc.CallOption) (*PauseRecordResponse, error)
	ResumeRecord(ctx context.Context, in *ResumeRecordRequest, opts ...grpc.CallOption) (*ResumeRecordResponse, error)
	SplitRecordFile(ctx context.Context, in *SplitRecordFileRequest, opts ...grpc.CallOption) (*SplitRecordFileResponse, error)
	CreateRecordChapter(ctx context.Context, in *CreateRecordChapterRequest, opts ...grpc.CallOption) (*CreateRecordChapterResponse, error)
	GetSceneItemList(ctx context.Context, in *GetSceneItemListRequest, opts ...grpc.CallOption) (*GetSceneItemListResponse, error)
	GetGroupSceneItemList(ctx context.Context, in *GetGroupSceneItemListRequest, opts ...grpc.CallOption) (*GetGroupSceneItemListResponse, error)
	GetSceneItemId(ctx context.Context, in *GetSceneItemIdRequest, opts ...grpc.CallOption) (*GetSceneItemIdResponse, error)
	GetSceneItemSource(ctx context.Context, in *GetSceneItemSourceRequest, opts ...grpc.CallOption) (*GetSceneItemSourceResponse, error)
	CreateSceneItem(ctx context.Context, in *CreateSceneItemRequest, opts ...grpc.CallOption) (*CreateSceneItemResponse, error)
	RemoveSceneItem(ctx context.Context, in *RemoveSceneItemRequest, opts ...grpc.CallOption) (*RemoveSceneItemResponse, error)
	DuplicateSceneItem(ctx context.Context, in *DuplicateSceneItemRequest, opts ...grpc.CallOption) (*DuplicateSceneItemResponse, error)
	GetSceneItemTransform(ctx context.Context, in *GetSceneItemTransformRequest, opts ...grpc.CallOption) (*GetSceneItemTransformResponse, error)
	SetSceneItemTransform(ctx context.Context, in *SetSceneItemTransformRequest, opts ...grpc.CallOption) (*SetSceneItemTransformResponse, error)
	GetSceneItemEnabled(ctx context.Context, in *GetSceneItemEnabledRequest, opts ...grpc.CallOption) (*GetSceneItemEnabledResponse, error)
	SetSceneItemEnabled(ctx context.Context, in *SetSceneItemEnabledRequest, opts ...grpc.CallOption) (*SetSceneItemEnabledResponse, error)
	GetSceneItemLocked(ctx context.Context, in *GetSceneItemLockedRequest, opts ...grpc.CallOption) (*GetSceneItemLockedResponse, error)
	SetSceneItemLocked(ctx context.Context, in *SetSceneItemLockedRequest, opts ...grpc.CallOption) (*SetSceneItemLockedResponse, error)
	GetSceneItemIndex(ctx context.Context, in *GetSceneItemIndexRequest, opts ...grpc.CallOption) (*GetSceneItemIndexResponse, error)
	SetSceneItemIndex(ctx context.Context, in *SetSceneItemIndexRequest, opts ...grpc.CallOption) (*SetSceneItemIndexResponse, error)
	GetSceneItemBlendMode(ctx context.Context, in *GetSceneItemBlendModeRequest, opts ...grpc.CallOption) (*GetSceneItemBlendModeResponse, error)
	SetSceneItemBlendMode(ctx context.Context, in *SetSceneItemBlendModeRequest, opts ...grpc.CallOption) (*SetSceneItemBlendModeResponse, error)
	GetSceneList(ctx context.Context, in *GetSceneListRequest, opts ...grpc.CallOption) (*GetSceneListResponse, error)
	GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GetGroupListResponse, error)
	GetCurrentProgramScene(ctx context.Context, in *GetCurrentProgramSceneRequest, opts ...grpc.CallOption) (*GetCurrentProgramSceneResponse, error)
	SetCurrentProgramScene(ctx context.Context, in *SetCurrentProgramSceneRequest, opts ...grpc.CallOption) (*SetCurrentProgramSceneResponse, error)
	GetCurrentPreviewScene(ctx context.Context, in *GetCurrentPreviewSceneRequest, opts ...grpc.CallOption) (*GetCurrentPreviewSceneResponse, error)
	SetCurrentPreviewScene(ctx context.Context, in *SetCurrentPreviewSceneRequest, opts ...grpc.CallOption) (*SetCurrentPreviewSceneResponse, error)
	CreateScene(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*CreateSceneResponse, error)
	RemoveScene(ctx context.Context, in *RemoveSceneRequest, opts ...grpc.CallOption) (*RemoveSceneResponse, error)
	SetSceneName(ctx context.Context, in *SetSceneNameRequest, opts ...grpc.CallOption) (*SetSceneNameResponse, error)
	GetSceneSceneTransitionOverride(ctx context.Context, in *GetSceneSceneTransitionOverrideRequest, opts ...grpc.CallOption) (*GetSceneSceneTransitionOverrideResponse, error)
	SetSceneSceneTransitionOverride(ctx context.Context, in *SetSceneSceneTransitionOverrideRequest, opts ...grpc.CallOption) (*SetSceneSceneTransitionOverrideResponse, error)
	GetSourceActive(ctx context.Context, in *GetSourceActiveRequest, opts ...grpc.CallOption) (*GetSourceActiveResponse, error)
	GetSourceScreenshot(ctx context.Context, in *GetSourceScreenshotRequest, opts ...grpc.CallOption) (*GetSourceScreenshotResponse, error)
	SaveSourceScreenshot(ctx context.Context, in *SaveSourceScreenshotRequest, opts ...grpc.CallOption) (*SaveSourceScreenshotResponse, error)
	GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusResponse, error)
	ToggleStream(ctx context.Context, in *ToggleStreamRequest, opts ...grpc.CallOption) (*ToggleStreamResponse, error)
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error)
	StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*StopStreamResponse, error)
	SendStreamCaption(ctx context.Context, in *SendStreamCaptionRequest, opts ...grpc.CallOption) (*SendStreamCaptionResponse, error)
	GetTransitionKindList(ctx context.Context, in *GetTransitionKindListRequest, opts ...grpc.CallOption) (*GetTransitionKindListResponse, error)
	GetSceneTransitionList(ctx context.Context, in *GetSceneTransitionListRequest, opts ...grpc.CallOption) (*GetSceneTransitionListResponse, error)
	GetCurrentSceneTransition(ctx context.Context, in *GetCurrentSceneTransitionRequest, opts ...grpc.CallOption) (*GetCurrentSceneTransitionResponse, error)
	SetCurrentSceneTransition(ctx context.Context, in *SetCurrentSceneTransitionRequest, opts ...grpc.CallOption) (*SetCurrentSceneTransitionResponse, error)
	SetCurrentSceneTransitionDuration(ctx context.Context, in *SetCurrentSceneTransitionDurationRequest, opts ...grpc.CallOption) (*SetCurrentSceneTransitionDurationResponse, error)
	SetCurrentSceneTransitionSettings(ctx context.Context, in *SetCurrentSceneTransitionSettingsRequest, opts ...grpc.CallOption) (*SetCurrentSceneTransitionSettingsResponse, error)
	GetCurrentSceneTransitionCursor(ctx context.Context, in *GetCurrentSceneTransitionCursorRequest, opts ...grpc.CallOption) (*GetCurrentSceneTransitionCursorResponse, error)
	TriggerStudioModeTransition(ctx context.Context, in *TriggerStudioModeTransitionRequest, opts ...grpc.CallOption) (*TriggerStudioModeTransitionResponse, error)
	SetTBarPosition(ctx context.Context, in *SetTBarPositionRequest, opts ...grpc.CallOption) (*SetTBarPositionResponse, error)
	GetStudioModeEnabled(ctx context.Context, in *GetStudioModeEnabledRequest, opts ...grpc.CallOption) (*GetStudioModeEnabledResponse, error)
	SetStudioModeEnabled(ctx context.Context, in *SetStudioModeEnabledRequest, opts ...grpc.CallOption) (*SetStudioModeEnabledResponse, error)
	OpenInputPropertiesDialog(ctx context.Context, in *OpenInputPropertiesDialogRequest, opts ...grpc.CallOption) (*OpenInputPropertiesDialogResponse, error)
	OpenInputFiltersDialog(ctx context.Context, in *OpenInputFiltersDialogRequest, opts ...grpc.CallOption) (*OpenInputFiltersDialogResponse, error)
	OpenInputInteractDialog(ctx context.Context, in *OpenInputInteractDialogRequest, opts ...grpc.CallOption) (*OpenInputInteractDialogResponse, error)
	GetMonitorList(ctx context.Context, in *GetMonitorListRequest, opts ...grpc.CallOption) (*GetMonitorListResponse, error)
	OpenVideoMixProjector(ctx context.Context, in *OpenVideoMixProjectorRequest, opts ...grpc.CallOption) (*OpenVideoMixProjectorResponse, error)
	OpenSourceProjector(ctx context.Context, in *OpenSourceProjectorRequest, opts ...grpc.CallOption) (*OpenSourceProjectorResponse, error)
}

type oBSClient struct {
	cc grpc.ClientConnInterface
}

func NewOBSClient(cc grpc.ClientConnInterface) OBSClient {
	return &oBSClient{cc}
}

func (c *oBSClient) GetPersistentData(ctx context.Context, in *GetPersistentDataRequest, opts ...grpc.CallOption) (*GetPersistentDataResponse, error) {
	out := new(GetPersistentDataResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetPersistentData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetPersistentData(ctx context.Context, in *SetPersistentDataRequest, opts ...grpc.CallOption) (*SetPersistentDataResponse, error) {
	out := new(SetPersistentDataResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetPersistentData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneCollectionList(ctx context.Context, in *GetSceneCollectionListRequest, opts ...grpc.CallOption) (*GetSceneCollectionListResponse, error) {
	out := new(GetSceneCollectionListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneCollectionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentSceneCollection(ctx context.Context, in *SetCurrentSceneCollectionRequest, opts ...grpc.CallOption) (*SetCurrentSceneCollectionResponse, error) {
	out := new(SetCurrentSceneCollectionResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentSceneCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateSceneCollection(ctx context.Context, in *CreateSceneCollectionRequest, opts ...grpc.CallOption) (*CreateSceneCollectionResponse, error) {
	out := new(CreateSceneCollectionResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateSceneCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetProfileList(ctx context.Context, in *GetProfileListRequest, opts ...grpc.CallOption) (*GetProfileListResponse, error) {
	out := new(GetProfileListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetProfileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentProfile(ctx context.Context, in *SetCurrentProfileRequest, opts ...grpc.CallOption) (*SetCurrentProfileResponse, error) {
	out := new(SetCurrentProfileResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) RemoveProfile(ctx context.Context, in *RemoveProfileRequest, opts ...grpc.CallOption) (*RemoveProfileResponse, error) {
	out := new(RemoveProfileResponse)
	err := c.cc.Invoke(ctx, "/OBS/RemoveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetProfileParameter(ctx context.Context, in *GetProfileParameterRequest, opts ...grpc.CallOption) (*GetProfileParameterResponse, error) {
	out := new(GetProfileParameterResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetProfileParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetProfileParameter(ctx context.Context, in *SetProfileParameterRequest, opts ...grpc.CallOption) (*SetProfileParameterResponse, error) {
	out := new(SetProfileParameterResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetProfileParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetVideoSettings(ctx context.Context, in *GetVideoSettingsRequest, opts ...grpc.CallOption) (*GetVideoSettingsResponse, error) {
	out := new(GetVideoSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetVideoSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetVideoSettings(ctx context.Context, in *SetVideoSettingsRequest, opts ...grpc.CallOption) (*SetVideoSettingsResponse, error) {
	out := new(SetVideoSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetVideoSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetStreamServiceSettings(ctx context.Context, in *GetStreamServiceSettingsRequest, opts ...grpc.CallOption) (*GetStreamServiceSettingsResponse, error) {
	out := new(GetStreamServiceSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetStreamServiceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetStreamServiceSettings(ctx context.Context, in *SetStreamServiceSettingsRequest, opts ...grpc.CallOption) (*SetStreamServiceSettingsResponse, error) {
	out := new(SetStreamServiceSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetStreamServiceSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetRecordDirectory(ctx context.Context, in *GetRecordDirectoryRequest, opts ...grpc.CallOption) (*GetRecordDirectoryResponse, error) {
	out := new(GetRecordDirectoryResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetRecordDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetRecordDirectory(ctx context.Context, in *SetRecordDirectoryRequest, opts ...grpc.CallOption) (*SetRecordDirectoryResponse, error) {
	out := new(SetRecordDirectoryResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetRecordDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSourceFilterKindList(ctx context.Context, in *GetSourceFilterKindListRequest, opts ...grpc.CallOption) (*GetSourceFilterKindListResponse, error) {
	out := new(GetSourceFilterKindListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSourceFilterKindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSourceFilterList(ctx context.Context, in *GetSourceFilterListRequest, opts ...grpc.CallOption) (*GetSourceFilterListResponse, error) {
	out := new(GetSourceFilterListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSourceFilterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSourceFilterDefaultSettings(ctx context.Context, in *GetSourceFilterDefaultSettingsRequest, opts ...grpc.CallOption) (*GetSourceFilterDefaultSettingsResponse, error) {
	out := new(GetSourceFilterDefaultSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSourceFilterDefaultSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateSourceFilter(ctx context.Context, in *CreateSourceFilterRequest, opts ...grpc.CallOption) (*CreateSourceFilterResponse, error) {
	out := new(CreateSourceFilterResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateSourceFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) RemoveSourceFilter(ctx context.Context, in *RemoveSourceFilterRequest, opts ...grpc.CallOption) (*RemoveSourceFilterResponse, error) {
	out := new(RemoveSourceFilterResponse)
	err := c.cc.Invoke(ctx, "/OBS/RemoveSourceFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSourceFilterName(ctx context.Context, in *SetSourceFilterNameRequest, opts ...grpc.CallOption) (*SetSourceFilterNameResponse, error) {
	out := new(SetSourceFilterNameResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSourceFilterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSourceFilter(ctx context.Context, in *GetSourceFilterRequest, opts ...grpc.CallOption) (*GetSourceFilterResponse, error) {
	out := new(GetSourceFilterResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSourceFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSourceFilterIndex(ctx context.Context, in *SetSourceFilterIndexRequest, opts ...grpc.CallOption) (*SetSourceFilterIndexResponse, error) {
	out := new(SetSourceFilterIndexResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSourceFilterIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSourceFilterSettings(ctx context.Context, in *SetSourceFilterSettingsRequest, opts ...grpc.CallOption) (*SetSourceFilterSettingsResponse, error) {
	out := new(SetSourceFilterSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSourceFilterSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSourceFilterEnabled(ctx context.Context, in *SetSourceFilterEnabledRequest, opts ...grpc.CallOption) (*SetSourceFilterEnabledResponse, error) {
	out := new(SetSourceFilterEnabledResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSourceFilterEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) BroadcastCustomEvent(ctx context.Context, in *BroadcastCustomEventRequest, opts ...grpc.CallOption) (*BroadcastCustomEventResponse, error) {
	out := new(BroadcastCustomEventResponse)
	err := c.cc.Invoke(ctx, "/OBS/BroadcastCustomEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CallVendorRequest(ctx context.Context, in *CallVendorRequestRequest, opts ...grpc.CallOption) (*CallVendorRequestResponse, error) {
	out := new(CallVendorRequestResponse)
	err := c.cc.Invoke(ctx, "/OBS/CallVendorRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetHotkeyList(ctx context.Context, in *GetHotkeyListRequest, opts ...grpc.CallOption) (*GetHotkeyListResponse, error) {
	out := new(GetHotkeyListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetHotkeyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) TriggerHotkeyByName(ctx context.Context, in *TriggerHotkeyByNameRequest, opts ...grpc.CallOption) (*TriggerHotkeyByNameResponse, error) {
	out := new(TriggerHotkeyByNameResponse)
	err := c.cc.Invoke(ctx, "/OBS/TriggerHotkeyByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) TriggerHotkeyByKeySequence(ctx context.Context, in *TriggerHotkeyByKeySequenceRequest, opts ...grpc.CallOption) (*TriggerHotkeyByKeySequenceResponse, error) {
	out := new(TriggerHotkeyByKeySequenceResponse)
	err := c.cc.Invoke(ctx, "/OBS/TriggerHotkeyByKeySequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error) {
	out := new(SleepResponse)
	err := c.cc.Invoke(ctx, "/OBS/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputList(ctx context.Context, in *GetInputListRequest, opts ...grpc.CallOption) (*GetInputListResponse, error) {
	out := new(GetInputListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputKindList(ctx context.Context, in *GetInputKindListRequest, opts ...grpc.CallOption) (*GetInputKindListResponse, error) {
	out := new(GetInputKindListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputKindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSpecialInputs(ctx context.Context, in *GetSpecialInputsRequest, opts ...grpc.CallOption) (*GetSpecialInputsResponse, error) {
	out := new(GetSpecialInputsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSpecialInputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateInput(ctx context.Context, in *CreateInputRequest, opts ...grpc.CallOption) (*CreateInputResponse, error) {
	out := new(CreateInputResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) RemoveInput(ctx context.Context, in *RemoveInputRequest, opts ...grpc.CallOption) (*RemoveInputResponse, error) {
	out := new(RemoveInputResponse)
	err := c.cc.Invoke(ctx, "/OBS/RemoveInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputName(ctx context.Context, in *SetInputNameRequest, opts ...grpc.CallOption) (*SetInputNameResponse, error) {
	out := new(SetInputNameResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputDefaultSettings(ctx context.Context, in *GetInputDefaultSettingsRequest, opts ...grpc.CallOption) (*GetInputDefaultSettingsResponse, error) {
	out := new(GetInputDefaultSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputDefaultSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputSettings(ctx context.Context, in *GetInputSettingsRequest, opts ...grpc.CallOption) (*GetInputSettingsResponse, error) {
	out := new(GetInputSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputSettings(ctx context.Context, in *SetInputSettingsRequest, opts ...grpc.CallOption) (*SetInputSettingsResponse, error) {
	out := new(SetInputSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputMute(ctx context.Context, in *GetInputMuteRequest, opts ...grpc.CallOption) (*GetInputMuteResponse, error) {
	out := new(GetInputMuteResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputMute(ctx context.Context, in *SetInputMuteRequest, opts ...grpc.CallOption) (*SetInputMuteResponse, error) {
	out := new(SetInputMuteResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleInputMute(ctx context.Context, in *ToggleInputMuteRequest, opts ...grpc.CallOption) (*ToggleInputMuteResponse, error) {
	out := new(ToggleInputMuteResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleInputMute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputVolume(ctx context.Context, in *GetInputVolumeRequest, opts ...grpc.CallOption) (*GetInputVolumeResponse, error) {
	out := new(GetInputVolumeResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputVolume(ctx context.Context, in *SetInputVolumeRequest, opts ...grpc.CallOption) (*SetInputVolumeResponse, error) {
	out := new(SetInputVolumeResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputAudioBalance(ctx context.Context, in *GetInputAudioBalanceRequest, opts ...grpc.CallOption) (*GetInputAudioBalanceResponse, error) {
	out := new(GetInputAudioBalanceResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputAudioBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputAudioBalance(ctx context.Context, in *SetInputAudioBalanceRequest, opts ...grpc.CallOption) (*SetInputAudioBalanceResponse, error) {
	out := new(SetInputAudioBalanceResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputAudioBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputAudioSyncOffset(ctx context.Context, in *GetInputAudioSyncOffsetRequest, opts ...grpc.CallOption) (*GetInputAudioSyncOffsetResponse, error) {
	out := new(GetInputAudioSyncOffsetResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputAudioSyncOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputAudioSyncOffset(ctx context.Context, in *SetInputAudioSyncOffsetRequest, opts ...grpc.CallOption) (*SetInputAudioSyncOffsetResponse, error) {
	out := new(SetInputAudioSyncOffsetResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputAudioSyncOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputAudioMonitorType(ctx context.Context, in *GetInputAudioMonitorTypeRequest, opts ...grpc.CallOption) (*GetInputAudioMonitorTypeResponse, error) {
	out := new(GetInputAudioMonitorTypeResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputAudioMonitorType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputAudioMonitorType(ctx context.Context, in *SetInputAudioMonitorTypeRequest, opts ...grpc.CallOption) (*SetInputAudioMonitorTypeResponse, error) {
	out := new(SetInputAudioMonitorTypeResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputAudioMonitorType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputAudioTracks(ctx context.Context, in *GetInputAudioTracksRequest, opts ...grpc.CallOption) (*GetInputAudioTracksResponse, error) {
	out := new(GetInputAudioTracksResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputAudioTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetInputAudioTracks(ctx context.Context, in *SetInputAudioTracksRequest, opts ...grpc.CallOption) (*SetInputAudioTracksResponse, error) {
	out := new(SetInputAudioTracksResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetInputAudioTracks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetInputPropertiesListPropertyItems(ctx context.Context, in *GetInputPropertiesListPropertyItemsRequest, opts ...grpc.CallOption) (*GetInputPropertiesListPropertyItemsResponse, error) {
	out := new(GetInputPropertiesListPropertyItemsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetInputPropertiesListPropertyItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) PressInputPropertiesButton(ctx context.Context, in *PressInputPropertiesButtonRequest, opts ...grpc.CallOption) (*PressInputPropertiesButtonResponse, error) {
	out := new(PressInputPropertiesButtonResponse)
	err := c.cc.Invoke(ctx, "/OBS/PressInputPropertiesButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetMediaInputStatus(ctx context.Context, in *GetMediaInputStatusRequest, opts ...grpc.CallOption) (*GetMediaInputStatusResponse, error) {
	out := new(GetMediaInputStatusResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetMediaInputStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetMediaInputCursor(ctx context.Context, in *SetMediaInputCursorRequest, opts ...grpc.CallOption) (*SetMediaInputCursorResponse, error) {
	out := new(SetMediaInputCursorResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetMediaInputCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) OffsetMediaInputCursor(ctx context.Context, in *OffsetMediaInputCursorRequest, opts ...grpc.CallOption) (*OffsetMediaInputCursorResponse, error) {
	out := new(OffsetMediaInputCursorResponse)
	err := c.cc.Invoke(ctx, "/OBS/OffsetMediaInputCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) TriggerMediaInputAction(ctx context.Context, in *TriggerMediaInputActionRequest, opts ...grpc.CallOption) (*TriggerMediaInputActionResponse, error) {
	out := new(TriggerMediaInputActionResponse)
	err := c.cc.Invoke(ctx, "/OBS/TriggerMediaInputAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetVirtualCamStatus(ctx context.Context, in *GetVirtualCamStatusRequest, opts ...grpc.CallOption) (*GetVirtualCamStatusResponse, error) {
	out := new(GetVirtualCamStatusResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetVirtualCamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleVirtualCam(ctx context.Context, in *ToggleVirtualCamRequest, opts ...grpc.CallOption) (*ToggleVirtualCamResponse, error) {
	out := new(ToggleVirtualCamResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleVirtualCam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StartVirtualCam(ctx context.Context, in *StartVirtualCamRequest, opts ...grpc.CallOption) (*StartVirtualCamResponse, error) {
	out := new(StartVirtualCamResponse)
	err := c.cc.Invoke(ctx, "/OBS/StartVirtualCam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StopVirtualCam(ctx context.Context, in *StopVirtualCamRequest, opts ...grpc.CallOption) (*StopVirtualCamResponse, error) {
	out := new(StopVirtualCamResponse)
	err := c.cc.Invoke(ctx, "/OBS/StopVirtualCam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetReplayBufferStatus(ctx context.Context, in *GetReplayBufferStatusRequest, opts ...grpc.CallOption) (*GetReplayBufferStatusResponse, error) {
	out := new(GetReplayBufferStatusResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetReplayBufferStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleReplayBuffer(ctx context.Context, in *ToggleReplayBufferRequest, opts ...grpc.CallOption) (*ToggleReplayBufferResponse, error) {
	out := new(ToggleReplayBufferResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleReplayBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StartReplayBuffer(ctx context.Context, in *StartReplayBufferRequest, opts ...grpc.CallOption) (*StartReplayBufferResponse, error) {
	out := new(StartReplayBufferResponse)
	err := c.cc.Invoke(ctx, "/OBS/StartReplayBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StopReplayBuffer(ctx context.Context, in *StopReplayBufferRequest, opts ...grpc.CallOption) (*StopReplayBufferResponse, error) {
	out := new(StopReplayBufferResponse)
	err := c.cc.Invoke(ctx, "/OBS/StopReplayBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SaveReplayBuffer(ctx context.Context, in *SaveReplayBufferRequest, opts ...grpc.CallOption) (*SaveReplayBufferResponse, error) {
	out := new(SaveReplayBufferResponse)
	err := c.cc.Invoke(ctx, "/OBS/SaveReplayBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetLastReplayBufferReplay(ctx context.Context, in *GetLastReplayBufferReplayRequest, opts ...grpc.CallOption) (*GetLastReplayBufferReplayResponse, error) {
	out := new(GetLastReplayBufferReplayResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetLastReplayBufferReplay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetOutputList(ctx context.Context, in *GetOutputListRequest, opts ...grpc.CallOption) (*GetOutputListResponse, error) {
	out := new(GetOutputListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetOutputList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetOutputStatus(ctx context.Context, in *GetOutputStatusRequest, opts ...grpc.CallOption) (*GetOutputStatusResponse, error) {
	out := new(GetOutputStatusResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetOutputStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleOutput(ctx context.Context, in *ToggleOutputRequest, opts ...grpc.CallOption) (*ToggleOutputResponse, error) {
	out := new(ToggleOutputResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StartOutput(ctx context.Context, in *StartOutputRequest, opts ...grpc.CallOption) (*StartOutputResponse, error) {
	out := new(StartOutputResponse)
	err := c.cc.Invoke(ctx, "/OBS/StartOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StopOutput(ctx context.Context, in *StopOutputRequest, opts ...grpc.CallOption) (*StopOutputResponse, error) {
	out := new(StopOutputResponse)
	err := c.cc.Invoke(ctx, "/OBS/StopOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetOutputSettings(ctx context.Context, in *GetOutputSettingsRequest, opts ...grpc.CallOption) (*GetOutputSettingsResponse, error) {
	out := new(GetOutputSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetOutputSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetOutputSettings(ctx context.Context, in *SetOutputSettingsRequest, opts ...grpc.CallOption) (*SetOutputSettingsResponse, error) {
	out := new(SetOutputSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetOutputSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetRecordStatus(ctx context.Context, in *GetRecordStatusRequest, opts ...grpc.CallOption) (*GetRecordStatusResponse, error) {
	out := new(GetRecordStatusResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetRecordStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleRecord(ctx context.Context, in *ToggleRecordRequest, opts ...grpc.CallOption) (*ToggleRecordResponse, error) {
	out := new(ToggleRecordResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StartRecord(ctx context.Context, in *StartRecordRequest, opts ...grpc.CallOption) (*StartRecordResponse, error) {
	out := new(StartRecordResponse)
	err := c.cc.Invoke(ctx, "/OBS/StartRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StopRecord(ctx context.Context, in *StopRecordRequest, opts ...grpc.CallOption) (*StopRecordResponse, error) {
	out := new(StopRecordResponse)
	err := c.cc.Invoke(ctx, "/OBS/StopRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleRecordPause(ctx context.Context, in *ToggleRecordPauseRequest, opts ...grpc.CallOption) (*ToggleRecordPauseResponse, error) {
	out := new(ToggleRecordPauseResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleRecordPause", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) PauseRecord(ctx context.Context, in *PauseRecordRequest, opts ...grpc.CallOption) (*PauseRecordResponse, error) {
	out := new(PauseRecordResponse)
	err := c.cc.Invoke(ctx, "/OBS/PauseRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ResumeRecord(ctx context.Context, in *ResumeRecordRequest, opts ...grpc.CallOption) (*ResumeRecordResponse, error) {
	out := new(ResumeRecordResponse)
	err := c.cc.Invoke(ctx, "/OBS/ResumeRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SplitRecordFile(ctx context.Context, in *SplitRecordFileRequest, opts ...grpc.CallOption) (*SplitRecordFileResponse, error) {
	out := new(SplitRecordFileResponse)
	err := c.cc.Invoke(ctx, "/OBS/SplitRecordFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateRecordChapter(ctx context.Context, in *CreateRecordChapterRequest, opts ...grpc.CallOption) (*CreateRecordChapterResponse, error) {
	out := new(CreateRecordChapterResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateRecordChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemList(ctx context.Context, in *GetSceneItemListRequest, opts ...grpc.CallOption) (*GetSceneItemListResponse, error) {
	out := new(GetSceneItemListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetGroupSceneItemList(ctx context.Context, in *GetGroupSceneItemListRequest, opts ...grpc.CallOption) (*GetGroupSceneItemListResponse, error) {
	out := new(GetGroupSceneItemListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetGroupSceneItemList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemId(ctx context.Context, in *GetSceneItemIdRequest, opts ...grpc.CallOption) (*GetSceneItemIdResponse, error) {
	out := new(GetSceneItemIdResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemSource(ctx context.Context, in *GetSceneItemSourceRequest, opts ...grpc.CallOption) (*GetSceneItemSourceResponse, error) {
	out := new(GetSceneItemSourceResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateSceneItem(ctx context.Context, in *CreateSceneItemRequest, opts ...grpc.CallOption) (*CreateSceneItemResponse, error) {
	out := new(CreateSceneItemResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateSceneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) RemoveSceneItem(ctx context.Context, in *RemoveSceneItemRequest, opts ...grpc.CallOption) (*RemoveSceneItemResponse, error) {
	out := new(RemoveSceneItemResponse)
	err := c.cc.Invoke(ctx, "/OBS/RemoveSceneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) DuplicateSceneItem(ctx context.Context, in *DuplicateSceneItemRequest, opts ...grpc.CallOption) (*DuplicateSceneItemResponse, error) {
	out := new(DuplicateSceneItemResponse)
	err := c.cc.Invoke(ctx, "/OBS/DuplicateSceneItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemTransform(ctx context.Context, in *GetSceneItemTransformRequest, opts ...grpc.CallOption) (*GetSceneItemTransformResponse, error) {
	out := new(GetSceneItemTransformResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemTransform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneItemTransform(ctx context.Context, in *SetSceneItemTransformRequest, opts ...grpc.CallOption) (*SetSceneItemTransformResponse, error) {
	out := new(SetSceneItemTransformResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneItemTransform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemEnabled(ctx context.Context, in *GetSceneItemEnabledRequest, opts ...grpc.CallOption) (*GetSceneItemEnabledResponse, error) {
	out := new(GetSceneItemEnabledResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneItemEnabled(ctx context.Context, in *SetSceneItemEnabledRequest, opts ...grpc.CallOption) (*SetSceneItemEnabledResponse, error) {
	out := new(SetSceneItemEnabledResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneItemEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemLocked(ctx context.Context, in *GetSceneItemLockedRequest, opts ...grpc.CallOption) (*GetSceneItemLockedResponse, error) {
	out := new(GetSceneItemLockedResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneItemLocked(ctx context.Context, in *SetSceneItemLockedRequest, opts ...grpc.CallOption) (*SetSceneItemLockedResponse, error) {
	out := new(SetSceneItemLockedResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneItemLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemIndex(ctx context.Context, in *GetSceneItemIndexRequest, opts ...grpc.CallOption) (*GetSceneItemIndexResponse, error) {
	out := new(GetSceneItemIndexResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneItemIndex(ctx context.Context, in *SetSceneItemIndexRequest, opts ...grpc.CallOption) (*SetSceneItemIndexResponse, error) {
	out := new(SetSceneItemIndexResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneItemIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneItemBlendMode(ctx context.Context, in *GetSceneItemBlendModeRequest, opts ...grpc.CallOption) (*GetSceneItemBlendModeResponse, error) {
	out := new(GetSceneItemBlendModeResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneItemBlendMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneItemBlendMode(ctx context.Context, in *SetSceneItemBlendModeRequest, opts ...grpc.CallOption) (*SetSceneItemBlendModeResponse, error) {
	out := new(SetSceneItemBlendModeResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneItemBlendMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneList(ctx context.Context, in *GetSceneListRequest, opts ...grpc.CallOption) (*GetSceneListResponse, error) {
	out := new(GetSceneListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetGroupList(ctx context.Context, in *GetGroupListRequest, opts ...grpc.CallOption) (*GetGroupListResponse, error) {
	out := new(GetGroupListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetGroupList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetCurrentProgramScene(ctx context.Context, in *GetCurrentProgramSceneRequest, opts ...grpc.CallOption) (*GetCurrentProgramSceneResponse, error) {
	out := new(GetCurrentProgramSceneResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetCurrentProgramScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentProgramScene(ctx context.Context, in *SetCurrentProgramSceneRequest, opts ...grpc.CallOption) (*SetCurrentProgramSceneResponse, error) {
	out := new(SetCurrentProgramSceneResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentProgramScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetCurrentPreviewScene(ctx context.Context, in *GetCurrentPreviewSceneRequest, opts ...grpc.CallOption) (*GetCurrentPreviewSceneResponse, error) {
	out := new(GetCurrentPreviewSceneResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetCurrentPreviewScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentPreviewScene(ctx context.Context, in *SetCurrentPreviewSceneRequest, opts ...grpc.CallOption) (*SetCurrentPreviewSceneResponse, error) {
	out := new(SetCurrentPreviewSceneResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentPreviewScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) CreateScene(ctx context.Context, in *CreateSceneRequest, opts ...grpc.CallOption) (*CreateSceneResponse, error) {
	out := new(CreateSceneResponse)
	err := c.cc.Invoke(ctx, "/OBS/CreateScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) RemoveScene(ctx context.Context, in *RemoveSceneRequest, opts ...grpc.CallOption) (*RemoveSceneResponse, error) {
	out := new(RemoveSceneResponse)
	err := c.cc.Invoke(ctx, "/OBS/RemoveScene", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneName(ctx context.Context, in *SetSceneNameRequest, opts ...grpc.CallOption) (*SetSceneNameResponse, error) {
	out := new(SetSceneNameResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneSceneTransitionOverride(ctx context.Context, in *GetSceneSceneTransitionOverrideRequest, opts ...grpc.CallOption) (*GetSceneSceneTransitionOverrideResponse, error) {
	out := new(GetSceneSceneTransitionOverrideResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneSceneTransitionOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetSceneSceneTransitionOverride(ctx context.Context, in *SetSceneSceneTransitionOverrideRequest, opts ...grpc.CallOption) (*SetSceneSceneTransitionOverrideResponse, error) {
	out := new(SetSceneSceneTransitionOverrideResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetSceneSceneTransitionOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSourceActive(ctx context.Context, in *GetSourceActiveRequest, opts ...grpc.CallOption) (*GetSourceActiveResponse, error) {
	out := new(GetSourceActiveResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSourceActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSourceScreenshot(ctx context.Context, in *GetSourceScreenshotRequest, opts ...grpc.CallOption) (*GetSourceScreenshotResponse, error) {
	out := new(GetSourceScreenshotResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSourceScreenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SaveSourceScreenshot(ctx context.Context, in *SaveSourceScreenshotRequest, opts ...grpc.CallOption) (*SaveSourceScreenshotResponse, error) {
	out := new(SaveSourceScreenshotResponse)
	err := c.cc.Invoke(ctx, "/OBS/SaveSourceScreenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusResponse, error) {
	out := new(GetStreamStatusResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetStreamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) ToggleStream(ctx context.Context, in *ToggleStreamRequest, opts ...grpc.CallOption) (*ToggleStreamResponse, error) {
	out := new(ToggleStreamResponse)
	err := c.cc.Invoke(ctx, "/OBS/ToggleStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error) {
	out := new(StartStreamResponse)
	err := c.cc.Invoke(ctx, "/OBS/StartStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*StopStreamResponse, error) {
	out := new(StopStreamResponse)
	err := c.cc.Invoke(ctx, "/OBS/StopStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SendStreamCaption(ctx context.Context, in *SendStreamCaptionRequest, opts ...grpc.CallOption) (*SendStreamCaptionResponse, error) {
	out := new(SendStreamCaptionResponse)
	err := c.cc.Invoke(ctx, "/OBS/SendStreamCaption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetTransitionKindList(ctx context.Context, in *GetTransitionKindListRequest, opts ...grpc.CallOption) (*GetTransitionKindListResponse, error) {
	out := new(GetTransitionKindListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetTransitionKindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetSceneTransitionList(ctx context.Context, in *GetSceneTransitionListRequest, opts ...grpc.CallOption) (*GetSceneTransitionListResponse, error) {
	out := new(GetSceneTransitionListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetSceneTransitionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetCurrentSceneTransition(ctx context.Context, in *GetCurrentSceneTransitionRequest, opts ...grpc.CallOption) (*GetCurrentSceneTransitionResponse, error) {
	out := new(GetCurrentSceneTransitionResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetCurrentSceneTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentSceneTransition(ctx context.Context, in *SetCurrentSceneTransitionRequest, opts ...grpc.CallOption) (*SetCurrentSceneTransitionResponse, error) {
	out := new(SetCurrentSceneTransitionResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentSceneTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentSceneTransitionDuration(ctx context.Context, in *SetCurrentSceneTransitionDurationRequest, opts ...grpc.CallOption) (*SetCurrentSceneTransitionDurationResponse, error) {
	out := new(SetCurrentSceneTransitionDurationResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentSceneTransitionDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetCurrentSceneTransitionSettings(ctx context.Context, in *SetCurrentSceneTransitionSettingsRequest, opts ...grpc.CallOption) (*SetCurrentSceneTransitionSettingsResponse, error) {
	out := new(SetCurrentSceneTransitionSettingsResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetCurrentSceneTransitionSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetCurrentSceneTransitionCursor(ctx context.Context, in *GetCurrentSceneTransitionCursorRequest, opts ...grpc.CallOption) (*GetCurrentSceneTransitionCursorResponse, error) {
	out := new(GetCurrentSceneTransitionCursorResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetCurrentSceneTransitionCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) TriggerStudioModeTransition(ctx context.Context, in *TriggerStudioModeTransitionRequest, opts ...grpc.CallOption) (*TriggerStudioModeTransitionResponse, error) {
	out := new(TriggerStudioModeTransitionResponse)
	err := c.cc.Invoke(ctx, "/OBS/TriggerStudioModeTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetTBarPosition(ctx context.Context, in *SetTBarPositionRequest, opts ...grpc.CallOption) (*SetTBarPositionResponse, error) {
	out := new(SetTBarPositionResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetTBarPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetStudioModeEnabled(ctx context.Context, in *GetStudioModeEnabledRequest, opts ...grpc.CallOption) (*GetStudioModeEnabledResponse, error) {
	out := new(GetStudioModeEnabledResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetStudioModeEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) SetStudioModeEnabled(ctx context.Context, in *SetStudioModeEnabledRequest, opts ...grpc.CallOption) (*SetStudioModeEnabledResponse, error) {
	out := new(SetStudioModeEnabledResponse)
	err := c.cc.Invoke(ctx, "/OBS/SetStudioModeEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) OpenInputPropertiesDialog(ctx context.Context, in *OpenInputPropertiesDialogRequest, opts ...grpc.CallOption) (*OpenInputPropertiesDialogResponse, error) {
	out := new(OpenInputPropertiesDialogResponse)
	err := c.cc.Invoke(ctx, "/OBS/OpenInputPropertiesDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) OpenInputFiltersDialog(ctx context.Context, in *OpenInputFiltersDialogRequest, opts ...grpc.CallOption) (*OpenInputFiltersDialogResponse, error) {
	out := new(OpenInputFiltersDialogResponse)
	err := c.cc.Invoke(ctx, "/OBS/OpenInputFiltersDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) OpenInputInteractDialog(ctx context.Context, in *OpenInputInteractDialogRequest, opts ...grpc.CallOption) (*OpenInputInteractDialogResponse, error) {
	out := new(OpenInputInteractDialogResponse)
	err := c.cc.Invoke(ctx, "/OBS/OpenInputInteractDialog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) GetMonitorList(ctx context.Context, in *GetMonitorListRequest, opts ...grpc.CallOption) (*GetMonitorListResponse, error) {
	out := new(GetMonitorListResponse)
	err := c.cc.Invoke(ctx, "/OBS/GetMonitorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) OpenVideoMixProjector(ctx context.Context, in *OpenVideoMixProjectorRequest, opts ...grpc.CallOption) (*OpenVideoMixProjectorResponse, error) {
	out := new(OpenVideoMixProjectorResponse)
	err := c.cc.Invoke(ctx, "/OBS/OpenVideoMixProjector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oBSClient) OpenSourceProjector(ctx context.Context, in *OpenSourceProjectorRequest, opts ...grpc.CallOption) (*OpenSourceProjectorResponse, error) {
	out := new(OpenSourceProjectorResponse)
	err := c.cc.Invoke(ctx, "/OBS/OpenSourceProjector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OBSServer is the server API for OBS service.
// All implementations must embed UnimplementedOBSServer
// for forward compatibility
type OBSServer interface {
	GetPersistentData(context.Context, *GetPersistentDataRequest) (*GetPersistentDataResponse, error)
	SetPersistentData(context.Context, *SetPersistentDataRequest) (*SetPersistentDataResponse, error)
	GetSceneCollectionList(context.Context, *GetSceneCollectionListRequest) (*GetSceneCollectionListResponse, error)
	SetCurrentSceneCollection(context.Context, *SetCurrentSceneCollectionRequest) (*SetCurrentSceneCollectionResponse, error)
	CreateSceneCollection(context.Context, *CreateSceneCollectionRequest) (*CreateSceneCollectionResponse, error)
	GetProfileList(context.Context, *GetProfileListRequest) (*GetProfileListResponse, error)
	SetCurrentProfile(context.Context, *SetCurrentProfileRequest) (*SetCurrentProfileResponse, error)
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	RemoveProfile(context.Context, *RemoveProfileRequest) (*RemoveProfileResponse, error)
	GetProfileParameter(context.Context, *GetProfileParameterRequest) (*GetProfileParameterResponse, error)
	SetProfileParameter(context.Context, *SetProfileParameterRequest) (*SetProfileParameterResponse, error)
	GetVideoSettings(context.Context, *GetVideoSettingsRequest) (*GetVideoSettingsResponse, error)
	SetVideoSettings(context.Context, *SetVideoSettingsRequest) (*SetVideoSettingsResponse, error)
	GetStreamServiceSettings(context.Context, *GetStreamServiceSettingsRequest) (*GetStreamServiceSettingsResponse, error)
	SetStreamServiceSettings(context.Context, *SetStreamServiceSettingsRequest) (*SetStreamServiceSettingsResponse, error)
	GetRecordDirectory(context.Context, *GetRecordDirectoryRequest) (*GetRecordDirectoryResponse, error)
	SetRecordDirectory(context.Context, *SetRecordDirectoryRequest) (*SetRecordDirectoryResponse, error)
	GetSourceFilterKindList(context.Context, *GetSourceFilterKindListRequest) (*GetSourceFilterKindListResponse, error)
	GetSourceFilterList(context.Context, *GetSourceFilterListRequest) (*GetSourceFilterListResponse, error)
	GetSourceFilterDefaultSettings(context.Context, *GetSourceFilterDefaultSettingsRequest) (*GetSourceFilterDefaultSettingsResponse, error)
	CreateSourceFilter(context.Context, *CreateSourceFilterRequest) (*CreateSourceFilterResponse, error)
	RemoveSourceFilter(context.Context, *RemoveSourceFilterRequest) (*RemoveSourceFilterResponse, error)
	SetSourceFilterName(context.Context, *SetSourceFilterNameRequest) (*SetSourceFilterNameResponse, error)
	GetSourceFilter(context.Context, *GetSourceFilterRequest) (*GetSourceFilterResponse, error)
	SetSourceFilterIndex(context.Context, *SetSourceFilterIndexRequest) (*SetSourceFilterIndexResponse, error)
	SetSourceFilterSettings(context.Context, *SetSourceFilterSettingsRequest) (*SetSourceFilterSettingsResponse, error)
	SetSourceFilterEnabled(context.Context, *SetSourceFilterEnabledRequest) (*SetSourceFilterEnabledResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	BroadcastCustomEvent(context.Context, *BroadcastCustomEventRequest) (*BroadcastCustomEventResponse, error)
	CallVendorRequest(context.Context, *CallVendorRequestRequest) (*CallVendorRequestResponse, error)
	GetHotkeyList(context.Context, *GetHotkeyListRequest) (*GetHotkeyListResponse, error)
	TriggerHotkeyByName(context.Context, *TriggerHotkeyByNameRequest) (*TriggerHotkeyByNameResponse, error)
	TriggerHotkeyByKeySequence(context.Context, *TriggerHotkeyByKeySequenceRequest) (*TriggerHotkeyByKeySequenceResponse, error)
	Sleep(context.Context, *SleepRequest) (*SleepResponse, error)
	GetInputList(context.Context, *GetInputListRequest) (*GetInputListResponse, error)
	GetInputKindList(context.Context, *GetInputKindListRequest) (*GetInputKindListResponse, error)
	GetSpecialInputs(context.Context, *GetSpecialInputsRequest) (*GetSpecialInputsResponse, error)
	CreateInput(context.Context, *CreateInputRequest) (*CreateInputResponse, error)
	RemoveInput(context.Context, *RemoveInputRequest) (*RemoveInputResponse, error)
	SetInputName(context.Context, *SetInputNameRequest) (*SetInputNameResponse, error)
	GetInputDefaultSettings(context.Context, *GetInputDefaultSettingsRequest) (*GetInputDefaultSettingsResponse, error)
	GetInputSettings(context.Context, *GetInputSettingsRequest) (*GetInputSettingsResponse, error)
	SetInputSettings(context.Context, *SetInputSettingsRequest) (*SetInputSettingsResponse, error)
	GetInputMute(context.Context, *GetInputMuteRequest) (*GetInputMuteResponse, error)
	SetInputMute(context.Context, *SetInputMuteRequest) (*SetInputMuteResponse, error)
	ToggleInputMute(context.Context, *ToggleInputMuteRequest) (*ToggleInputMuteResponse, error)
	GetInputVolume(context.Context, *GetInputVolumeRequest) (*GetInputVolumeResponse, error)
	SetInputVolume(context.Context, *SetInputVolumeRequest) (*SetInputVolumeResponse, error)
	GetInputAudioBalance(context.Context, *GetInputAudioBalanceRequest) (*GetInputAudioBalanceResponse, error)
	SetInputAudioBalance(context.Context, *SetInputAudioBalanceRequest) (*SetInputAudioBalanceResponse, error)
	GetInputAudioSyncOffset(context.Context, *GetInputAudioSyncOffsetRequest) (*GetInputAudioSyncOffsetResponse, error)
	SetInputAudioSyncOffset(context.Context, *SetInputAudioSyncOffsetRequest) (*SetInputAudioSyncOffsetResponse, error)
	GetInputAudioMonitorType(context.Context, *GetInputAudioMonitorTypeRequest) (*GetInputAudioMonitorTypeResponse, error)
	SetInputAudioMonitorType(context.Context, *SetInputAudioMonitorTypeRequest) (*SetInputAudioMonitorTypeResponse, error)
	GetInputAudioTracks(context.Context, *GetInputAudioTracksRequest) (*GetInputAudioTracksResponse, error)
	SetInputAudioTracks(context.Context, *SetInputAudioTracksRequest) (*SetInputAudioTracksResponse, error)
	GetInputPropertiesListPropertyItems(context.Context, *GetInputPropertiesListPropertyItemsRequest) (*GetInputPropertiesListPropertyItemsResponse, error)
	PressInputPropertiesButton(context.Context, *PressInputPropertiesButtonRequest) (*PressInputPropertiesButtonResponse, error)
	GetMediaInputStatus(context.Context, *GetMediaInputStatusRequest) (*GetMediaInputStatusResponse, error)
	SetMediaInputCursor(context.Context, *SetMediaInputCursorRequest) (*SetMediaInputCursorResponse, error)
	OffsetMediaInputCursor(context.Context, *OffsetMediaInputCursorRequest) (*OffsetMediaInputCursorResponse, error)
	TriggerMediaInputAction(context.Context, *TriggerMediaInputActionRequest) (*TriggerMediaInputActionResponse, error)
	GetVirtualCamStatus(context.Context, *GetVirtualCamStatusRequest) (*GetVirtualCamStatusResponse, error)
	ToggleVirtualCam(context.Context, *ToggleVirtualCamRequest) (*ToggleVirtualCamResponse, error)
	StartVirtualCam(context.Context, *StartVirtualCamRequest) (*StartVirtualCamResponse, error)
	StopVirtualCam(context.Context, *StopVirtualCamRequest) (*StopVirtualCamResponse, error)
	GetReplayBufferStatus(context.Context, *GetReplayBufferStatusRequest) (*GetReplayBufferStatusResponse, error)
	ToggleReplayBuffer(context.Context, *ToggleReplayBufferRequest) (*ToggleReplayBufferResponse, error)
	StartReplayBuffer(context.Context, *StartReplayBufferRequest) (*StartReplayBufferResponse, error)
	StopReplayBuffer(context.Context, *StopReplayBufferRequest) (*StopReplayBufferResponse, error)
	SaveReplayBuffer(context.Context, *SaveReplayBufferRequest) (*SaveReplayBufferResponse, error)
	GetLastReplayBufferReplay(context.Context, *GetLastReplayBufferReplayRequest) (*GetLastReplayBufferReplayResponse, error)
	GetOutputList(context.Context, *GetOutputListRequest) (*GetOutputListResponse, error)
	GetOutputStatus(context.Context, *GetOutputStatusRequest) (*GetOutputStatusResponse, error)
	ToggleOutput(context.Context, *ToggleOutputRequest) (*ToggleOutputResponse, error)
	StartOutput(context.Context, *StartOutputRequest) (*StartOutputResponse, error)
	StopOutput(context.Context, *StopOutputRequest) (*StopOutputResponse, error)
	GetOutputSettings(context.Context, *GetOutputSettingsRequest) (*GetOutputSettingsResponse, error)
	SetOutputSettings(context.Context, *SetOutputSettingsRequest) (*SetOutputSettingsResponse, error)
	GetRecordStatus(context.Context, *GetRecordStatusRequest) (*GetRecordStatusResponse, error)
	ToggleRecord(context.Context, *ToggleRecordRequest) (*ToggleRecordResponse, error)
	StartRecord(context.Context, *StartRecordRequest) (*StartRecordResponse, error)
	StopRecord(context.Context, *StopRecordRequest) (*StopRecordResponse, error)
	ToggleRecordPause(context.Context, *ToggleRecordPauseRequest) (*ToggleRecordPauseResponse, error)
	PauseRecord(context.Context, *PauseRecordRequest) (*PauseRecordResponse, error)
	ResumeRecord(context.Context, *ResumeRecordRequest) (*ResumeRecordResponse, error)
	SplitRecordFile(context.Context, *SplitRecordFileRequest) (*SplitRecordFileResponse, error)
	CreateRecordChapter(context.Context, *CreateRecordChapterRequest) (*CreateRecordChapterResponse, error)
	GetSceneItemList(context.Context, *GetSceneItemListRequest) (*GetSceneItemListResponse, error)
	GetGroupSceneItemList(context.Context, *GetGroupSceneItemListRequest) (*GetGroupSceneItemListResponse, error)
	GetSceneItemId(context.Context, *GetSceneItemIdRequest) (*GetSceneItemIdResponse, error)
	GetSceneItemSource(context.Context, *GetSceneItemSourceRequest) (*GetSceneItemSourceResponse, error)
	CreateSceneItem(context.Context, *CreateSceneItemRequest) (*CreateSceneItemResponse, error)
	RemoveSceneItem(context.Context, *RemoveSceneItemRequest) (*RemoveSceneItemResponse, error)
	DuplicateSceneItem(context.Context, *DuplicateSceneItemRequest) (*DuplicateSceneItemResponse, error)
	GetSceneItemTransform(context.Context, *GetSceneItemTransformRequest) (*GetSceneItemTransformResponse, error)
	SetSceneItemTransform(context.Context, *SetSceneItemTransformRequest) (*SetSceneItemTransformResponse, error)
	GetSceneItemEnabled(context.Context, *GetSceneItemEnabledRequest) (*GetSceneItemEnabledResponse, error)
	SetSceneItemEnabled(context.Context, *SetSceneItemEnabledRequest) (*SetSceneItemEnabledResponse, error)
	GetSceneItemLocked(context.Context, *GetSceneItemLockedRequest) (*GetSceneItemLockedResponse, error)
	SetSceneItemLocked(context.Context, *SetSceneItemLockedRequest) (*SetSceneItemLockedResponse, error)
	GetSceneItemIndex(context.Context, *GetSceneItemIndexRequest) (*GetSceneItemIndexResponse, error)
	SetSceneItemIndex(context.Context, *SetSceneItemIndexRequest) (*SetSceneItemIndexResponse, error)
	GetSceneItemBlendMode(context.Context, *GetSceneItemBlendModeRequest) (*GetSceneItemBlendModeResponse, error)
	SetSceneItemBlendMode(context.Context, *SetSceneItemBlendModeRequest) (*SetSceneItemBlendModeResponse, error)
	GetSceneList(context.Context, *GetSceneListRequest) (*GetSceneListResponse, error)
	GetGroupList(context.Context, *GetGroupListRequest) (*GetGroupListResponse, error)
	GetCurrentProgramScene(context.Context, *GetCurrentProgramSceneRequest) (*GetCurrentProgramSceneResponse, error)
	SetCurrentProgramScene(context.Context, *SetCurrentProgramSceneRequest) (*SetCurrentProgramSceneResponse, error)
	GetCurrentPreviewScene(context.Context, *GetCurrentPreviewSceneRequest) (*GetCurrentPreviewSceneResponse, error)
	SetCurrentPreviewScene(context.Context, *SetCurrentPreviewSceneRequest) (*SetCurrentPreviewSceneResponse, error)
	CreateScene(context.Context, *CreateSceneRequest) (*CreateSceneResponse, error)
	RemoveScene(context.Context, *RemoveSceneRequest) (*RemoveSceneResponse, error)
	SetSceneName(context.Context, *SetSceneNameRequest) (*SetSceneNameResponse, error)
	GetSceneSceneTransitionOverride(context.Context, *GetSceneSceneTransitionOverrideRequest) (*GetSceneSceneTransitionOverrideResponse, error)
	SetSceneSceneTransitionOverride(context.Context, *SetSceneSceneTransitionOverrideRequest) (*SetSceneSceneTransitionOverrideResponse, error)
	GetSourceActive(context.Context, *GetSourceActiveRequest) (*GetSourceActiveResponse, error)
	GetSourceScreenshot(context.Context, *GetSourceScreenshotRequest) (*GetSourceScreenshotResponse, error)
	SaveSourceScreenshot(context.Context, *SaveSourceScreenshotRequest) (*SaveSourceScreenshotResponse, error)
	GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusResponse, error)
	ToggleStream(context.Context, *ToggleStreamRequest) (*ToggleStreamResponse, error)
	StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error)
	StopStream(context.Context, *StopStreamRequest) (*StopStreamResponse, error)
	SendStreamCaption(context.Context, *SendStreamCaptionRequest) (*SendStreamCaptionResponse, error)
	GetTransitionKindList(context.Context, *GetTransitionKindListRequest) (*GetTransitionKindListResponse, error)
	GetSceneTransitionList(context.Context, *GetSceneTransitionListRequest) (*GetSceneTransitionListResponse, error)
	GetCurrentSceneTransition(context.Context, *GetCurrentSceneTransitionRequest) (*GetCurrentSceneTransitionResponse, error)
	SetCurrentSceneTransition(context.Context, *SetCurrentSceneTransitionRequest) (*SetCurrentSceneTransitionResponse, error)
	SetCurrentSceneTransitionDuration(context.Context, *SetCurrentSceneTransitionDurationRequest) (*SetCurrentSceneTransitionDurationResponse, error)
	SetCurrentSceneTransitionSettings(context.Context, *SetCurrentSceneTransitionSettingsRequest) (*SetCurrentSceneTransitionSettingsResponse, error)
	GetCurrentSceneTransitionCursor(context.Context, *GetCurrentSceneTransitionCursorRequest) (*GetCurrentSceneTransitionCursorResponse, error)
	TriggerStudioModeTransition(context.Context, *TriggerStudioModeTransitionRequest) (*TriggerStudioModeTransitionResponse, error)
	SetTBarPosition(context.Context, *SetTBarPositionRequest) (*SetTBarPositionResponse, error)
	GetStudioModeEnabled(context.Context, *GetStudioModeEnabledRequest) (*GetStudioModeEnabledResponse, error)
	SetStudioModeEnabled(context.Context, *SetStudioModeEnabledRequest) (*SetStudioModeEnabledResponse, error)
	OpenInputPropertiesDialog(context.Context, *OpenInputPropertiesDialogRequest) (*OpenInputPropertiesDialogResponse, error)
	OpenInputFiltersDialog(context.Context, *OpenInputFiltersDialogRequest) (*OpenInputFiltersDialogResponse, error)
	OpenInputInteractDialog(context.Context, *OpenInputInteractDialogRequest) (*OpenInputInteractDialogResponse, error)
	GetMonitorList(context.Context, *GetMonitorListRequest) (*GetMonitorListResponse, error)
	OpenVideoMixProjector(context.Context, *OpenVideoMixProjectorRequest) (*OpenVideoMixProjectorResponse, error)
	OpenSourceProjector(context.Context, *OpenSourceProjectorRequest) (*OpenSourceProjectorResponse, error)
	mustEmbedUnimplementedOBSServer()
}

// UnimplementedOBSServer must be embedded to have forward compatible implementations.
type UnimplementedOBSServer struct {
}

func (UnimplementedOBSServer) GetPersistentData(context.Context, *GetPersistentDataRequest) (*GetPersistentDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersistentData not implemented")
}
func (UnimplementedOBSServer) SetPersistentData(context.Context, *SetPersistentDataRequest) (*SetPersistentDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPersistentData not implemented")
}
func (UnimplementedOBSServer) GetSceneCollectionList(context.Context, *GetSceneCollectionListRequest) (*GetSceneCollectionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneCollectionList not implemented")
}
func (UnimplementedOBSServer) SetCurrentSceneCollection(context.Context, *SetCurrentSceneCollectionRequest) (*SetCurrentSceneCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentSceneCollection not implemented")
}
func (UnimplementedOBSServer) CreateSceneCollection(context.Context, *CreateSceneCollectionRequest) (*CreateSceneCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSceneCollection not implemented")
}
func (UnimplementedOBSServer) GetProfileList(context.Context, *GetProfileListRequest) (*GetProfileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileList not implemented")
}
func (UnimplementedOBSServer) SetCurrentProfile(context.Context, *SetCurrentProfileRequest) (*SetCurrentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentProfile not implemented")
}
func (UnimplementedOBSServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedOBSServer) RemoveProfile(context.Context, *RemoveProfileRequest) (*RemoveProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProfile not implemented")
}
func (UnimplementedOBSServer) GetProfileParameter(context.Context, *GetProfileParameterRequest) (*GetProfileParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileParameter not implemented")
}
func (UnimplementedOBSServer) SetProfileParameter(context.Context, *SetProfileParameterRequest) (*SetProfileParameterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileParameter not implemented")
}
func (UnimplementedOBSServer) GetVideoSettings(context.Context, *GetVideoSettingsRequest) (*GetVideoSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoSettings not implemented")
}
func (UnimplementedOBSServer) SetVideoSettings(context.Context, *SetVideoSettingsRequest) (*SetVideoSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVideoSettings not implemented")
}
func (UnimplementedOBSServer) GetStreamServiceSettings(context.Context, *GetStreamServiceSettingsRequest) (*GetStreamServiceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamServiceSettings not implemented")
}
func (UnimplementedOBSServer) SetStreamServiceSettings(context.Context, *SetStreamServiceSettingsRequest) (*SetStreamServiceSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStreamServiceSettings not implemented")
}
func (UnimplementedOBSServer) GetRecordDirectory(context.Context, *GetRecordDirectoryRequest) (*GetRecordDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordDirectory not implemented")
}
func (UnimplementedOBSServer) SetRecordDirectory(context.Context, *SetRecordDirectoryRequest) (*SetRecordDirectoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecordDirectory not implemented")
}
func (UnimplementedOBSServer) GetSourceFilterKindList(context.Context, *GetSourceFilterKindListRequest) (*GetSourceFilterKindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFilterKindList not implemented")
}
func (UnimplementedOBSServer) GetSourceFilterList(context.Context, *GetSourceFilterListRequest) (*GetSourceFilterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFilterList not implemented")
}
func (UnimplementedOBSServer) GetSourceFilterDefaultSettings(context.Context, *GetSourceFilterDefaultSettingsRequest) (*GetSourceFilterDefaultSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFilterDefaultSettings not implemented")
}
func (UnimplementedOBSServer) CreateSourceFilter(context.Context, *CreateSourceFilterRequest) (*CreateSourceFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSourceFilter not implemented")
}
func (UnimplementedOBSServer) RemoveSourceFilter(context.Context, *RemoveSourceFilterRequest) (*RemoveSourceFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSourceFilter not implemented")
}
func (UnimplementedOBSServer) SetSourceFilterName(context.Context, *SetSourceFilterNameRequest) (*SetSourceFilterNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSourceFilterName not implemented")
}
func (UnimplementedOBSServer) GetSourceFilter(context.Context, *GetSourceFilterRequest) (*GetSourceFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceFilter not implemented")
}
func (UnimplementedOBSServer) SetSourceFilterIndex(context.Context, *SetSourceFilterIndexRequest) (*SetSourceFilterIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSourceFilterIndex not implemented")
}
func (UnimplementedOBSServer) SetSourceFilterSettings(context.Context, *SetSourceFilterSettingsRequest) (*SetSourceFilterSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSourceFilterSettings not implemented")
}
func (UnimplementedOBSServer) SetSourceFilterEnabled(context.Context, *SetSourceFilterEnabledRequest) (*SetSourceFilterEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSourceFilterEnabled not implemented")
}
func (UnimplementedOBSServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedOBSServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedOBSServer) BroadcastCustomEvent(context.Context, *BroadcastCustomEventRequest) (*BroadcastCustomEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastCustomEvent not implemented")
}
func (UnimplementedOBSServer) CallVendorRequest(context.Context, *CallVendorRequestRequest) (*CallVendorRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallVendorRequest not implemented")
}
func (UnimplementedOBSServer) GetHotkeyList(context.Context, *GetHotkeyListRequest) (*GetHotkeyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotkeyList not implemented")
}
func (UnimplementedOBSServer) TriggerHotkeyByName(context.Context, *TriggerHotkeyByNameRequest) (*TriggerHotkeyByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerHotkeyByName not implemented")
}
func (UnimplementedOBSServer) TriggerHotkeyByKeySequence(context.Context, *TriggerHotkeyByKeySequenceRequest) (*TriggerHotkeyByKeySequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerHotkeyByKeySequence not implemented")
}
func (UnimplementedOBSServer) Sleep(context.Context, *SleepRequest) (*SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedOBSServer) GetInputList(context.Context, *GetInputListRequest) (*GetInputListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputList not implemented")
}
func (UnimplementedOBSServer) GetInputKindList(context.Context, *GetInputKindListRequest) (*GetInputKindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputKindList not implemented")
}
func (UnimplementedOBSServer) GetSpecialInputs(context.Context, *GetSpecialInputsRequest) (*GetSpecialInputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialInputs not implemented")
}
func (UnimplementedOBSServer) CreateInput(context.Context, *CreateInputRequest) (*CreateInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInput not implemented")
}
func (UnimplementedOBSServer) RemoveInput(context.Context, *RemoveInputRequest) (*RemoveInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInput not implemented")
}
func (UnimplementedOBSServer) SetInputName(context.Context, *SetInputNameRequest) (*SetInputNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputName not implemented")
}
func (UnimplementedOBSServer) GetInputDefaultSettings(context.Context, *GetInputDefaultSettingsRequest) (*GetInputDefaultSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputDefaultSettings not implemented")
}
func (UnimplementedOBSServer) GetInputSettings(context.Context, *GetInputSettingsRequest) (*GetInputSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputSettings not implemented")
}
func (UnimplementedOBSServer) SetInputSettings(context.Context, *SetInputSettingsRequest) (*SetInputSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputSettings not implemented")
}
func (UnimplementedOBSServer) GetInputMute(context.Context, *GetInputMuteRequest) (*GetInputMuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputMute not implemented")
}
func (UnimplementedOBSServer) SetInputMute(context.Context, *SetInputMuteRequest) (*SetInputMuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputMute not implemented")
}
func (UnimplementedOBSServer) ToggleInputMute(context.Context, *ToggleInputMuteRequest) (*ToggleInputMuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleInputMute not implemented")
}
func (UnimplementedOBSServer) GetInputVolume(context.Context, *GetInputVolumeRequest) (*GetInputVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputVolume not implemented")
}
func (UnimplementedOBSServer) SetInputVolume(context.Context, *SetInputVolumeRequest) (*SetInputVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputVolume not implemented")
}
func (UnimplementedOBSServer) GetInputAudioBalance(context.Context, *GetInputAudioBalanceRequest) (*GetInputAudioBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputAudioBalance not implemented")
}
func (UnimplementedOBSServer) SetInputAudioBalance(context.Context, *SetInputAudioBalanceRequest) (*SetInputAudioBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputAudioBalance not implemented")
}
func (UnimplementedOBSServer) GetInputAudioSyncOffset(context.Context, *GetInputAudioSyncOffsetRequest) (*GetInputAudioSyncOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputAudioSyncOffset not implemented")
}
func (UnimplementedOBSServer) SetInputAudioSyncOffset(context.Context, *SetInputAudioSyncOffsetRequest) (*SetInputAudioSyncOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputAudioSyncOffset not implemented")
}
func (UnimplementedOBSServer) GetInputAudioMonitorType(context.Context, *GetInputAudioMonitorTypeRequest) (*GetInputAudioMonitorTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputAudioMonitorType not implemented")
}
func (UnimplementedOBSServer) SetInputAudioMonitorType(context.Context, *SetInputAudioMonitorTypeRequest) (*SetInputAudioMonitorTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputAudioMonitorType not implemented")
}
func (UnimplementedOBSServer) GetInputAudioTracks(context.Context, *GetInputAudioTracksRequest) (*GetInputAudioTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputAudioTracks not implemented")
}
func (UnimplementedOBSServer) SetInputAudioTracks(context.Context, *SetInputAudioTracksRequest) (*SetInputAudioTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInputAudioTracks not implemented")
}
func (UnimplementedOBSServer) GetInputPropertiesListPropertyItems(context.Context, *GetInputPropertiesListPropertyItemsRequest) (*GetInputPropertiesListPropertyItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInputPropertiesListPropertyItems not implemented")
}
func (UnimplementedOBSServer) PressInputPropertiesButton(context.Context, *PressInputPropertiesButtonRequest) (*PressInputPropertiesButtonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PressInputPropertiesButton not implemented")
}
func (UnimplementedOBSServer) GetMediaInputStatus(context.Context, *GetMediaInputStatusRequest) (*GetMediaInputStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMediaInputStatus not implemented")
}
func (UnimplementedOBSServer) SetMediaInputCursor(context.Context, *SetMediaInputCursorRequest) (*SetMediaInputCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMediaInputCursor not implemented")
}
func (UnimplementedOBSServer) OffsetMediaInputCursor(context.Context, *OffsetMediaInputCursorRequest) (*OffsetMediaInputCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffsetMediaInputCursor not implemented")
}
func (UnimplementedOBSServer) TriggerMediaInputAction(context.Context, *TriggerMediaInputActionRequest) (*TriggerMediaInputActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerMediaInputAction not implemented")
}
func (UnimplementedOBSServer) GetVirtualCamStatus(context.Context, *GetVirtualCamStatusRequest) (*GetVirtualCamStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualCamStatus not implemented")
}
func (UnimplementedOBSServer) ToggleVirtualCam(context.Context, *ToggleVirtualCamRequest) (*ToggleVirtualCamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleVirtualCam not implemented")
}
func (UnimplementedOBSServer) StartVirtualCam(context.Context, *StartVirtualCamRequest) (*StartVirtualCamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVirtualCam not implemented")
}
func (UnimplementedOBSServer) StopVirtualCam(context.Context, *StopVirtualCamRequest) (*StopVirtualCamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVirtualCam not implemented")
}
func (UnimplementedOBSServer) GetReplayBufferStatus(context.Context, *GetReplayBufferStatusRequest) (*GetReplayBufferStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplayBufferStatus not implemented")
}
func (UnimplementedOBSServer) ToggleReplayBuffer(context.Context, *ToggleReplayBufferRequest) (*ToggleReplayBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleReplayBuffer not implemented")
}
func (UnimplementedOBSServer) StartReplayBuffer(context.Context, *StartReplayBufferRequest) (*StartReplayBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReplayBuffer not implemented")
}
func (UnimplementedOBSServer) StopReplayBuffer(context.Context, *StopReplayBufferRequest) (*StopReplayBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopReplayBuffer not implemented")
}
func (UnimplementedOBSServer) SaveReplayBuffer(context.Context, *SaveReplayBufferRequest) (*SaveReplayBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveReplayBuffer not implemented")
}
func (UnimplementedOBSServer) GetLastReplayBufferReplay(context.Context, *GetLastReplayBufferReplayRequest) (*GetLastReplayBufferReplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastReplayBufferReplay not implemented")
}
func (UnimplementedOBSServer) GetOutputList(context.Context, *GetOutputListRequest) (*GetOutputListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputList not implemented")
}
func (UnimplementedOBSServer) GetOutputStatus(context.Context, *GetOutputStatusRequest) (*GetOutputStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputStatus not implemented")
}
func (UnimplementedOBSServer) ToggleOutput(context.Context, *ToggleOutputRequest) (*ToggleOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleOutput not implemented")
}
func (UnimplementedOBSServer) StartOutput(context.Context, *StartOutputRequest) (*StartOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOutput not implemented")
}
func (UnimplementedOBSServer) StopOutput(context.Context, *StopOutputRequest) (*StopOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopOutput not implemented")
}
func (UnimplementedOBSServer) GetOutputSettings(context.Context, *GetOutputSettingsRequest) (*GetOutputSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutputSettings not implemented")
}
func (UnimplementedOBSServer) SetOutputSettings(context.Context, *SetOutputSettingsRequest) (*SetOutputSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOutputSettings not implemented")
}
func (UnimplementedOBSServer) GetRecordStatus(context.Context, *GetRecordStatusRequest) (*GetRecordStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordStatus not implemented")
}
func (UnimplementedOBSServer) ToggleRecord(context.Context, *ToggleRecordRequest) (*ToggleRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleRecord not implemented")
}
func (UnimplementedOBSServer) StartRecord(context.Context, *StartRecordRequest) (*StartRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecord not implemented")
}
func (UnimplementedOBSServer) StopRecord(context.Context, *StopRecordRequest) (*StopRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecord not implemented")
}
func (UnimplementedOBSServer) ToggleRecordPause(context.Context, *ToggleRecordPauseRequest) (*ToggleRecordPauseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleRecordPause not implemented")
}
func (UnimplementedOBSServer) PauseRecord(context.Context, *PauseRecordRequest) (*PauseRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseRecord not implemented")
}
func (UnimplementedOBSServer) ResumeRecord(context.Context, *ResumeRecordRequest) (*ResumeRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRecord not implemented")
}
func (UnimplementedOBSServer) SplitRecordFile(context.Context, *SplitRecordFileRequest) (*SplitRecordFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitRecordFile not implemented")
}
func (UnimplementedOBSServer) CreateRecordChapter(context.Context, *CreateRecordChapterRequest) (*CreateRecordChapterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecordChapter not implemented")
}
func (UnimplementedOBSServer) GetSceneItemList(context.Context, *GetSceneItemListRequest) (*GetSceneItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemList not implemented")
}
func (UnimplementedOBSServer) GetGroupSceneItemList(context.Context, *GetGroupSceneItemListRequest) (*GetGroupSceneItemListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupSceneItemList not implemented")
}
func (UnimplementedOBSServer) GetSceneItemId(context.Context, *GetSceneItemIdRequest) (*GetSceneItemIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemId not implemented")
}
func (UnimplementedOBSServer) GetSceneItemSource(context.Context, *GetSceneItemSourceRequest) (*GetSceneItemSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemSource not implemented")
}
func (UnimplementedOBSServer) CreateSceneItem(context.Context, *CreateSceneItemRequest) (*CreateSceneItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSceneItem not implemented")
}
func (UnimplementedOBSServer) RemoveSceneItem(context.Context, *RemoveSceneItemRequest) (*RemoveSceneItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSceneItem not implemented")
}
func (UnimplementedOBSServer) DuplicateSceneItem(context.Context, *DuplicateSceneItemRequest) (*DuplicateSceneItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateSceneItem not implemented")
}
func (UnimplementedOBSServer) GetSceneItemTransform(context.Context, *GetSceneItemTransformRequest) (*GetSceneItemTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemTransform not implemented")
}
func (UnimplementedOBSServer) SetSceneItemTransform(context.Context, *SetSceneItemTransformRequest) (*SetSceneItemTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneItemTransform not implemented")
}
func (UnimplementedOBSServer) GetSceneItemEnabled(context.Context, *GetSceneItemEnabledRequest) (*GetSceneItemEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemEnabled not implemented")
}
func (UnimplementedOBSServer) SetSceneItemEnabled(context.Context, *SetSceneItemEnabledRequest) (*SetSceneItemEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneItemEnabled not implemented")
}
func (UnimplementedOBSServer) GetSceneItemLocked(context.Context, *GetSceneItemLockedRequest) (*GetSceneItemLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemLocked not implemented")
}
func (UnimplementedOBSServer) SetSceneItemLocked(context.Context, *SetSceneItemLockedRequest) (*SetSceneItemLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneItemLocked not implemented")
}
func (UnimplementedOBSServer) GetSceneItemIndex(context.Context, *GetSceneItemIndexRequest) (*GetSceneItemIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemIndex not implemented")
}
func (UnimplementedOBSServer) SetSceneItemIndex(context.Context, *SetSceneItemIndexRequest) (*SetSceneItemIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneItemIndex not implemented")
}
func (UnimplementedOBSServer) GetSceneItemBlendMode(context.Context, *GetSceneItemBlendModeRequest) (*GetSceneItemBlendModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneItemBlendMode not implemented")
}
func (UnimplementedOBSServer) SetSceneItemBlendMode(context.Context, *SetSceneItemBlendModeRequest) (*SetSceneItemBlendModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneItemBlendMode not implemented")
}
func (UnimplementedOBSServer) GetSceneList(context.Context, *GetSceneListRequest) (*GetSceneListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneList not implemented")
}
func (UnimplementedOBSServer) GetGroupList(context.Context, *GetGroupListRequest) (*GetGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupList not implemented")
}
func (UnimplementedOBSServer) GetCurrentProgramScene(context.Context, *GetCurrentProgramSceneRequest) (*GetCurrentProgramSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentProgramScene not implemented")
}
func (UnimplementedOBSServer) SetCurrentProgramScene(context.Context, *SetCurrentProgramSceneRequest) (*SetCurrentProgramSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentProgramScene not implemented")
}
func (UnimplementedOBSServer) GetCurrentPreviewScene(context.Context, *GetCurrentPreviewSceneRequest) (*GetCurrentPreviewSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPreviewScene not implemented")
}
func (UnimplementedOBSServer) SetCurrentPreviewScene(context.Context, *SetCurrentPreviewSceneRequest) (*SetCurrentPreviewSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentPreviewScene not implemented")
}
func (UnimplementedOBSServer) CreateScene(context.Context, *CreateSceneRequest) (*CreateSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScene not implemented")
}
func (UnimplementedOBSServer) RemoveScene(context.Context, *RemoveSceneRequest) (*RemoveSceneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScene not implemented")
}
func (UnimplementedOBSServer) SetSceneName(context.Context, *SetSceneNameRequest) (*SetSceneNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneName not implemented")
}
func (UnimplementedOBSServer) GetSceneSceneTransitionOverride(context.Context, *GetSceneSceneTransitionOverrideRequest) (*GetSceneSceneTransitionOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneSceneTransitionOverride not implemented")
}
func (UnimplementedOBSServer) SetSceneSceneTransitionOverride(context.Context, *SetSceneSceneTransitionOverrideRequest) (*SetSceneSceneTransitionOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSceneSceneTransitionOverride not implemented")
}
func (UnimplementedOBSServer) GetSourceActive(context.Context, *GetSourceActiveRequest) (*GetSourceActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceActive not implemented")
}
func (UnimplementedOBSServer) GetSourceScreenshot(context.Context, *GetSourceScreenshotRequest) (*GetSourceScreenshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceScreenshot not implemented")
}
func (UnimplementedOBSServer) SaveSourceScreenshot(context.Context, *SaveSourceScreenshotRequest) (*SaveSourceScreenshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSourceScreenshot not implemented")
}
func (UnimplementedOBSServer) GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStatus not implemented")
}
func (UnimplementedOBSServer) ToggleStream(context.Context, *ToggleStreamRequest) (*ToggleStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleStream not implemented")
}
func (UnimplementedOBSServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedOBSServer) StopStream(context.Context, *StopStreamRequest) (*StopStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedOBSServer) SendStreamCaption(context.Context, *SendStreamCaptionRequest) (*SendStreamCaptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStreamCaption not implemented")
}
func (UnimplementedOBSServer) GetTransitionKindList(context.Context, *GetTransitionKindListRequest) (*GetTransitionKindListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransitionKindList not implemented")
}
func (UnimplementedOBSServer) GetSceneTransitionList(context.Context, *GetSceneTransitionListRequest) (*GetSceneTransitionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneTransitionList not implemented")
}
func (UnimplementedOBSServer) GetCurrentSceneTransition(context.Context, *GetCurrentSceneTransitionRequest) (*GetCurrentSceneTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSceneTransition not implemented")
}
func (UnimplementedOBSServer) SetCurrentSceneTransition(context.Context, *SetCurrentSceneTransitionRequest) (*SetCurrentSceneTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentSceneTransition not implemented")
}
func (UnimplementedOBSServer) SetCurrentSceneTransitionDuration(context.Context, *SetCurrentSceneTransitionDurationRequest) (*SetCurrentSceneTransitionDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentSceneTransitionDuration not implemented")
}
func (UnimplementedOBSServer) SetCurrentSceneTransitionSettings(context.Context, *SetCurrentSceneTransitionSettingsRequest) (*SetCurrentSceneTransitionSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentSceneTransitionSettings not implemented")
}
func (UnimplementedOBSServer) GetCurrentSceneTransitionCursor(context.Context, *GetCurrentSceneTransitionCursorRequest) (*GetCurrentSceneTransitionCursorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSceneTransitionCursor not implemented")
}
func (UnimplementedOBSServer) TriggerStudioModeTransition(context.Context, *TriggerStudioModeTransitionRequest) (*TriggerStudioModeTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerStudioModeTransition not implemented")
}
func (UnimplementedOBSServer) SetTBarPosition(context.Context, *SetTBarPositionRequest) (*SetTBarPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTBarPosition not implemented")
}
func (UnimplementedOBSServer) GetStudioModeEnabled(context.Context, *GetStudioModeEnabledRequest) (*GetStudioModeEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudioModeEnabled not implemented")
}
func (UnimplementedOBSServer) SetStudioModeEnabled(context.Context, *SetStudioModeEnabledRequest) (*SetStudioModeEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStudioModeEnabled not implemented")
}
func (UnimplementedOBSServer) OpenInputPropertiesDialog(context.Context, *OpenInputPropertiesDialogRequest) (*OpenInputPropertiesDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenInputPropertiesDialog not implemented")
}
func (UnimplementedOBSServer) OpenInputFiltersDialog(context.Context, *OpenInputFiltersDialogRequest) (*OpenInputFiltersDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenInputFiltersDialog not implemented")
}
func (UnimplementedOBSServer) OpenInputInteractDialog(context.Context, *OpenInputInteractDialogRequest) (*OpenInputInteractDialogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenInputInteractDialog not implemented")
}
func (UnimplementedOBSServer) GetMonitorList(context.Context, *GetMonitorListRequest) (*GetMonitorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorList not implemented")
}
func (UnimplementedOBSServer) OpenVideoMixProjector(context.Context, *OpenVideoMixProjectorRequest) (*OpenVideoMixProjectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenVideoMixProjector not implemented")
}
func (UnimplementedOBSServer) OpenSourceProjector(context.Context, *OpenSourceProjectorRequest) (*OpenSourceProjectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSourceProjector not implemented")
}
func (UnimplementedOBSServer) mustEmbedUnimplementedOBSServer() {}

// UnsafeOBSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OBSServer will
// result in compilation errors.
type UnsafeOBSServer interface {
	mustEmbedUnimplementedOBSServer()
}

func RegisterOBSServer(s grpc.ServiceRegistrar, srv OBSServer) {
	s.RegisterService(&OBS_ServiceDesc, srv)
}

func _OBS_GetPersistentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersistentDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetPersistentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetPersistentData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetPersistentData(ctx, req.(*GetPersistentDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetPersistentData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPersistentDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetPersistentData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetPersistentData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetPersistentData(ctx, req.(*SetPersistentDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneCollectionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneCollectionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneCollectionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneCollectionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneCollectionList(ctx, req.(*GetSceneCollectionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentSceneCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentSceneCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentSceneCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentSceneCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentSceneCollection(ctx, req.(*SetCurrentSceneCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateSceneCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateSceneCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateSceneCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateSceneCollection(ctx, req.(*CreateSceneCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetProfileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetProfileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetProfileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetProfileList(ctx, req.(*GetProfileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentProfile(ctx, req.(*SetCurrentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_RemoveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).RemoveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/RemoveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).RemoveProfile(ctx, req.(*RemoveProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetProfileParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetProfileParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetProfileParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetProfileParameter(ctx, req.(*GetProfileParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetProfileParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfileParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetProfileParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetProfileParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetProfileParameter(ctx, req.(*SetProfileParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetVideoSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetVideoSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetVideoSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetVideoSettings(ctx, req.(*GetVideoSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetVideoSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVideoSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetVideoSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetVideoSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetVideoSettings(ctx, req.(*SetVideoSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetStreamServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetStreamServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetStreamServiceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetStreamServiceSettings(ctx, req.(*GetStreamServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetStreamServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStreamServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetStreamServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetStreamServiceSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetStreamServiceSettings(ctx, req.(*SetStreamServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetRecordDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetRecordDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetRecordDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetRecordDirectory(ctx, req.(*GetRecordDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetRecordDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecordDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetRecordDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetRecordDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetRecordDirectory(ctx, req.(*SetRecordDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSourceFilterKindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceFilterKindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSourceFilterKindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSourceFilterKindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSourceFilterKindList(ctx, req.(*GetSourceFilterKindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSourceFilterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceFilterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSourceFilterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSourceFilterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSourceFilterList(ctx, req.(*GetSourceFilterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSourceFilterDefaultSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceFilterDefaultSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSourceFilterDefaultSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSourceFilterDefaultSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSourceFilterDefaultSettings(ctx, req.(*GetSourceFilterDefaultSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateSourceFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateSourceFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateSourceFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateSourceFilter(ctx, req.(*CreateSourceFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_RemoveSourceFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSourceFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).RemoveSourceFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/RemoveSourceFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).RemoveSourceFilter(ctx, req.(*RemoveSourceFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSourceFilterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSourceFilterNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSourceFilterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSourceFilterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSourceFilterName(ctx, req.(*SetSourceFilterNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSourceFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSourceFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSourceFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSourceFilter(ctx, req.(*GetSourceFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSourceFilterIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSourceFilterIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSourceFilterIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSourceFilterIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSourceFilterIndex(ctx, req.(*SetSourceFilterIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSourceFilterSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSourceFilterSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSourceFilterSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSourceFilterSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSourceFilterSettings(ctx, req.(*SetSourceFilterSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSourceFilterEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSourceFilterEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSourceFilterEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSourceFilterEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSourceFilterEnabled(ctx, req.(*SetSourceFilterEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_BroadcastCustomEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastCustomEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).BroadcastCustomEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/BroadcastCustomEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).BroadcastCustomEvent(ctx, req.(*BroadcastCustomEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CallVendorRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallVendorRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CallVendorRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CallVendorRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CallVendorRequest(ctx, req.(*CallVendorRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetHotkeyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotkeyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetHotkeyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetHotkeyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetHotkeyList(ctx, req.(*GetHotkeyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_TriggerHotkeyByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerHotkeyByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).TriggerHotkeyByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/TriggerHotkeyByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).TriggerHotkeyByName(ctx, req.(*TriggerHotkeyByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_TriggerHotkeyByKeySequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerHotkeyByKeySequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).TriggerHotkeyByKeySequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/TriggerHotkeyByKeySequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).TriggerHotkeyByKeySequence(ctx, req.(*TriggerHotkeyByKeySequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).Sleep(ctx, req.(*SleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputList(ctx, req.(*GetInputListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputKindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputKindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputKindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputKindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputKindList(ctx, req.(*GetInputKindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSpecialInputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialInputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSpecialInputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSpecialInputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSpecialInputs(ctx, req.(*GetSpecialInputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateInput(ctx, req.(*CreateInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_RemoveInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).RemoveInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/RemoveInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).RemoveInput(ctx, req.(*RemoveInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputName(ctx, req.(*SetInputNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputDefaultSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputDefaultSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputDefaultSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputDefaultSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputDefaultSettings(ctx, req.(*GetInputDefaultSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputSettings(ctx, req.(*GetInputSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputSettings(ctx, req.(*SetInputSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputMute(ctx, req.(*GetInputMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputMute(ctx, req.(*SetInputMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleInputMute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleInputMuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleInputMute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleInputMute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleInputMute(ctx, req.(*ToggleInputMuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputVolume(ctx, req.(*GetInputVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputVolume(ctx, req.(*SetInputVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputAudioBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputAudioBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputAudioBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputAudioBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputAudioBalance(ctx, req.(*GetInputAudioBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputAudioBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputAudioBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputAudioBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputAudioBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputAudioBalance(ctx, req.(*SetInputAudioBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputAudioSyncOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputAudioSyncOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputAudioSyncOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputAudioSyncOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputAudioSyncOffset(ctx, req.(*GetInputAudioSyncOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputAudioSyncOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputAudioSyncOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputAudioSyncOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputAudioSyncOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputAudioSyncOffset(ctx, req.(*SetInputAudioSyncOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputAudioMonitorType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputAudioMonitorTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputAudioMonitorType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputAudioMonitorType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputAudioMonitorType(ctx, req.(*GetInputAudioMonitorTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputAudioMonitorType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputAudioMonitorTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputAudioMonitorType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputAudioMonitorType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputAudioMonitorType(ctx, req.(*SetInputAudioMonitorTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputAudioTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputAudioTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputAudioTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputAudioTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputAudioTracks(ctx, req.(*GetInputAudioTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetInputAudioTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInputAudioTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetInputAudioTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetInputAudioTracks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetInputAudioTracks(ctx, req.(*SetInputAudioTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetInputPropertiesListPropertyItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputPropertiesListPropertyItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetInputPropertiesListPropertyItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetInputPropertiesListPropertyItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetInputPropertiesListPropertyItems(ctx, req.(*GetInputPropertiesListPropertyItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_PressInputPropertiesButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PressInputPropertiesButtonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).PressInputPropertiesButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/PressInputPropertiesButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).PressInputPropertiesButton(ctx, req.(*PressInputPropertiesButtonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetMediaInputStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaInputStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetMediaInputStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetMediaInputStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetMediaInputStatus(ctx, req.(*GetMediaInputStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetMediaInputCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMediaInputCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetMediaInputCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetMediaInputCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetMediaInputCursor(ctx, req.(*SetMediaInputCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_OffsetMediaInputCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffsetMediaInputCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).OffsetMediaInputCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/OffsetMediaInputCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).OffsetMediaInputCursor(ctx, req.(*OffsetMediaInputCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_TriggerMediaInputAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerMediaInputActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).TriggerMediaInputAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/TriggerMediaInputAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).TriggerMediaInputAction(ctx, req.(*TriggerMediaInputActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetVirtualCamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualCamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetVirtualCamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetVirtualCamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetVirtualCamStatus(ctx, req.(*GetVirtualCamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleVirtualCam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleVirtualCamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleVirtualCam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleVirtualCam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleVirtualCam(ctx, req.(*ToggleVirtualCamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StartVirtualCam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVirtualCamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StartVirtualCam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StartVirtualCam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StartVirtualCam(ctx, req.(*StartVirtualCamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StopVirtualCam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVirtualCamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StopVirtualCam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StopVirtualCam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StopVirtualCam(ctx, req.(*StopVirtualCamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetReplayBufferStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplayBufferStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetReplayBufferStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetReplayBufferStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetReplayBufferStatus(ctx, req.(*GetReplayBufferStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleReplayBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleReplayBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleReplayBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleReplayBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleReplayBuffer(ctx, req.(*ToggleReplayBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StartReplayBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReplayBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StartReplayBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StartReplayBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StartReplayBuffer(ctx, req.(*StartReplayBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StopReplayBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopReplayBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StopReplayBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StopReplayBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StopReplayBuffer(ctx, req.(*StopReplayBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SaveReplayBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveReplayBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SaveReplayBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SaveReplayBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SaveReplayBuffer(ctx, req.(*SaveReplayBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetLastReplayBufferReplay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastReplayBufferReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetLastReplayBufferReplay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetLastReplayBufferReplay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetLastReplayBufferReplay(ctx, req.(*GetLastReplayBufferReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetOutputList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetOutputList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetOutputList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetOutputList(ctx, req.(*GetOutputListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetOutputStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetOutputStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetOutputStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetOutputStatus(ctx, req.(*GetOutputStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleOutput(ctx, req.(*ToggleOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StartOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StartOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StartOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StartOutput(ctx, req.(*StartOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StopOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StopOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StopOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StopOutput(ctx, req.(*StopOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetOutputSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetOutputSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetOutputSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetOutputSettings(ctx, req.(*GetOutputSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetOutputSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOutputSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetOutputSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetOutputSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetOutputSettings(ctx, req.(*SetOutputSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetRecordStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetRecordStatus(ctx, req.(*GetRecordStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleRecord(ctx, req.(*ToggleRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StartRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StartRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StartRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StartRecord(ctx, req.(*StartRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StopRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StopRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StopRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StopRecord(ctx, req.(*StopRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleRecordPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRecordPauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleRecordPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleRecordPause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleRecordPause(ctx, req.(*ToggleRecordPauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_PauseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).PauseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/PauseRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).PauseRecord(ctx, req.(*PauseRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ResumeRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ResumeRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ResumeRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ResumeRecord(ctx, req.(*ResumeRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SplitRecordFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitRecordFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SplitRecordFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SplitRecordFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SplitRecordFile(ctx, req.(*SplitRecordFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateRecordChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateRecordChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateRecordChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateRecordChapter(ctx, req.(*CreateRecordChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemList(ctx, req.(*GetSceneItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetGroupSceneItemList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupSceneItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetGroupSceneItemList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetGroupSceneItemList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetGroupSceneItemList(ctx, req.(*GetGroupSceneItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemId(ctx, req.(*GetSceneItemIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemSource(ctx, req.(*GetSceneItemSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateSceneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateSceneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateSceneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateSceneItem(ctx, req.(*CreateSceneItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_RemoveSceneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSceneItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).RemoveSceneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/RemoveSceneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).RemoveSceneItem(ctx, req.(*RemoveSceneItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_DuplicateSceneItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateSceneItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).DuplicateSceneItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/DuplicateSceneItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).DuplicateSceneItem(ctx, req.(*DuplicateSceneItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemTransform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemTransform(ctx, req.(*GetSceneItemTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneItemTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneItemTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneItemTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneItemTransform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneItemTransform(ctx, req.(*SetSceneItemTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemEnabled(ctx, req.(*GetSceneItemEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneItemEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneItemEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneItemEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneItemEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneItemEnabled(ctx, req.(*SetSceneItemEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemLocked(ctx, req.(*GetSceneItemLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneItemLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneItemLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneItemLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneItemLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneItemLocked(ctx, req.(*SetSceneItemLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemIndex(ctx, req.(*GetSceneItemIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneItemIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneItemIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneItemIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneItemIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneItemIndex(ctx, req.(*SetSceneItemIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneItemBlendMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneItemBlendModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneItemBlendMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneItemBlendMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneItemBlendMode(ctx, req.(*GetSceneItemBlendModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneItemBlendMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneItemBlendModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneItemBlendMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneItemBlendMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneItemBlendMode(ctx, req.(*SetSceneItemBlendModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneList(ctx, req.(*GetSceneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetGroupList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetGroupList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetGroupList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetGroupList(ctx, req.(*GetGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetCurrentProgramScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentProgramSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetCurrentProgramScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetCurrentProgramScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetCurrentProgramScene(ctx, req.(*GetCurrentProgramSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentProgramScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentProgramSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentProgramScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentProgramScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentProgramScene(ctx, req.(*SetCurrentProgramSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetCurrentPreviewScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentPreviewSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetCurrentPreviewScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetCurrentPreviewScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetCurrentPreviewScene(ctx, req.(*GetCurrentPreviewSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentPreviewScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentPreviewSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentPreviewScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentPreviewScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentPreviewScene(ctx, req.(*SetCurrentPreviewSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_CreateScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).CreateScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/CreateScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).CreateScene(ctx, req.(*CreateSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_RemoveScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSceneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).RemoveScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/RemoveScene",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).RemoveScene(ctx, req.(*RemoveSceneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneName(ctx, req.(*SetSceneNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneSceneTransitionOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneSceneTransitionOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneSceneTransitionOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneSceneTransitionOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneSceneTransitionOverride(ctx, req.(*GetSceneSceneTransitionOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetSceneSceneTransitionOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSceneSceneTransitionOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetSceneSceneTransitionOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetSceneSceneTransitionOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetSceneSceneTransitionOverride(ctx, req.(*SetSceneSceneTransitionOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSourceActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSourceActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSourceActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSourceActive(ctx, req.(*GetSourceActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSourceScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceScreenshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSourceScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSourceScreenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSourceScreenshot(ctx, req.(*GetSourceScreenshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SaveSourceScreenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSourceScreenshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SaveSourceScreenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SaveSourceScreenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SaveSourceScreenshot(ctx, req.(*SaveSourceScreenshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetStreamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetStreamStatus(ctx, req.(*GetStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_ToggleStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).ToggleStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/ToggleStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).ToggleStream(ctx, req.(*ToggleStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StartStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/StopStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).StopStream(ctx, req.(*StopStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SendStreamCaption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStreamCaptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SendStreamCaption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SendStreamCaption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SendStreamCaption(ctx, req.(*SendStreamCaptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetTransitionKindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransitionKindListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetTransitionKindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetTransitionKindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetTransitionKindList(ctx, req.(*GetTransitionKindListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetSceneTransitionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneTransitionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetSceneTransitionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetSceneTransitionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetSceneTransitionList(ctx, req.(*GetSceneTransitionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetCurrentSceneTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSceneTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetCurrentSceneTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetCurrentSceneTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetCurrentSceneTransition(ctx, req.(*GetCurrentSceneTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentSceneTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentSceneTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentSceneTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentSceneTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentSceneTransition(ctx, req.(*SetCurrentSceneTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentSceneTransitionDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentSceneTransitionDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentSceneTransitionDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentSceneTransitionDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentSceneTransitionDuration(ctx, req.(*SetCurrentSceneTransitionDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetCurrentSceneTransitionSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCurrentSceneTransitionSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetCurrentSceneTransitionSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetCurrentSceneTransitionSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetCurrentSceneTransitionSettings(ctx, req.(*SetCurrentSceneTransitionSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetCurrentSceneTransitionCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSceneTransitionCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetCurrentSceneTransitionCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetCurrentSceneTransitionCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetCurrentSceneTransitionCursor(ctx, req.(*GetCurrentSceneTransitionCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_TriggerStudioModeTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerStudioModeTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).TriggerStudioModeTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/TriggerStudioModeTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).TriggerStudioModeTransition(ctx, req.(*TriggerStudioModeTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetTBarPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTBarPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetTBarPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetTBarPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetTBarPosition(ctx, req.(*SetTBarPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetStudioModeEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudioModeEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetStudioModeEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetStudioModeEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetStudioModeEnabled(ctx, req.(*GetStudioModeEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_SetStudioModeEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStudioModeEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).SetStudioModeEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/SetStudioModeEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).SetStudioModeEnabled(ctx, req.(*SetStudioModeEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_OpenInputPropertiesDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenInputPropertiesDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).OpenInputPropertiesDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/OpenInputPropertiesDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).OpenInputPropertiesDialog(ctx, req.(*OpenInputPropertiesDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_OpenInputFiltersDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenInputFiltersDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).OpenInputFiltersDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/OpenInputFiltersDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).OpenInputFiltersDialog(ctx, req.(*OpenInputFiltersDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_OpenInputInteractDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenInputInteractDialogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).OpenInputInteractDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/OpenInputInteractDialog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).OpenInputInteractDialog(ctx, req.(*OpenInputInteractDialogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_GetMonitorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).GetMonitorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/GetMonitorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).GetMonitorList(ctx, req.(*GetMonitorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_OpenVideoMixProjector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenVideoMixProjectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).OpenVideoMixProjector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/OpenVideoMixProjector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).OpenVideoMixProjector(ctx, req.(*OpenVideoMixProjectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OBS_OpenSourceProjector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSourceProjectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OBSServer).OpenSourceProjector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OBS/OpenSourceProjector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OBSServer).OpenSourceProjector(ctx, req.(*OpenSourceProjectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OBS_ServiceDesc is the grpc.ServiceDesc for OBS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OBS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OBS",
	HandlerType: (*OBSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPersistentData",
			Handler:    _OBS_GetPersistentData_Handler,
		},
		{
			MethodName: "SetPersistentData",
			Handler:    _OBS_SetPersistentData_Handler,
		},
		{
			MethodName: "GetSceneCollectionList",
			Handler:    _OBS_GetSceneCollectionList_Handler,
		},
		{
			MethodName: "SetCurrentSceneCollection",
			Handler:    _OBS_SetCurrentSceneCollection_Handler,
		},
		{
			MethodName: "CreateSceneCollection",
			Handler:    _OBS_CreateSceneCollection_Handler,
		},
		{
			MethodName: "GetProfileList",
			Handler:    _OBS_GetProfileList_Handler,
		},
		{
			MethodName: "SetCurrentProfile",
			Handler:    _OBS_SetCurrentProfile_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _OBS_CreateProfile_Handler,
		},
		{
			MethodName: "RemoveProfile",
			Handler:    _OBS_RemoveProfile_Handler,
		},
		{
			MethodName: "GetProfileParameter",
			Handler:    _OBS_GetProfileParameter_Handler,
		},
		{
			MethodName: "SetProfileParameter",
			Handler:    _OBS_SetProfileParameter_Handler,
		},
		{
			MethodName: "GetVideoSettings",
			Handler:    _OBS_GetVideoSettings_Handler,
		},
		{
			MethodName: "SetVideoSettings",
			Handler:    _OBS_SetVideoSettings_Handler,
		},
		{
			MethodName: "GetStreamServiceSettings",
			Handler:    _OBS_GetStreamServiceSettings_Handler,
		},
		{
			MethodName: "SetStreamServiceSettings",
			Handler:    _OBS_SetStreamServiceSettings_Handler,
		},
		{
			MethodName: "GetRecordDirectory",
			Handler:    _OBS_GetRecordDirectory_Handler,
		},
		{
			MethodName: "SetRecordDirectory",
			Handler:    _OBS_SetRecordDirectory_Handler,
		},
		{
			MethodName: "GetSourceFilterKindList",
			Handler:    _OBS_GetSourceFilterKindList_Handler,
		},
		{
			MethodName: "GetSourceFilterList",
			Handler:    _OBS_GetSourceFilterList_Handler,
		},
		{
			MethodName: "GetSourceFilterDefaultSettings",
			Handler:    _OBS_GetSourceFilterDefaultSettings_Handler,
		},
		{
			MethodName: "CreateSourceFilter",
			Handler:    _OBS_CreateSourceFilter_Handler,
		},
		{
			MethodName: "RemoveSourceFilter",
			Handler:    _OBS_RemoveSourceFilter_Handler,
		},
		{
			MethodName: "SetSourceFilterName",
			Handler:    _OBS_SetSourceFilterName_Handler,
		},
		{
			MethodName: "GetSourceFilter",
			Handler:    _OBS_GetSourceFilter_Handler,
		},
		{
			MethodName: "SetSourceFilterIndex",
			Handler:    _OBS_SetSourceFilterIndex_Handler,
		},
		{
			MethodName: "SetSourceFilterSettings",
			Handler:    _OBS_SetSourceFilterSettings_Handler,
		},
		{
			MethodName: "SetSourceFilterEnabled",
			Handler:    _OBS_SetSourceFilterEnabled_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _OBS_GetVersion_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _OBS_GetStats_Handler,
		},
		{
			MethodName: "BroadcastCustomEvent",
			Handler:    _OBS_BroadcastCustomEvent_Handler,
		},
		{
			MethodName: "CallVendorRequest",
			Handler:    _OBS_CallVendorRequest_Handler,
		},
		{
			MethodName: "GetHotkeyList",
			Handler:    _OBS_GetHotkeyList_Handler,
		},
		{
			MethodName: "TriggerHotkeyByName",
			Handler:    _OBS_TriggerHotkeyByName_Handler,
		},
		{
			MethodName: "TriggerHotkeyByKeySequence",
			Handler:    _OBS_TriggerHotkeyByKeySequence_Handler,
		},
		{
			MethodName: "Sleep",
			Handler:    _OBS_Sleep_Handler,
		},
		{
			MethodName: "GetInputList",
			Handler:    _OBS_GetInputList_Handler,
		},
		{
			MethodName: "GetInputKindList",
			Handler:    _OBS_GetInputKindList_Handler,
		},
		{
			MethodName: "GetSpecialInputs",
			Handler:    _OBS_GetSpecialInputs_Handler,
		},
		{
			MethodName: "CreateInput",
			Handler:    _OBS_CreateInput_Handler,
		},
		{
			MethodName: "RemoveInput",
			Handler:    _OBS_RemoveInput_Handler,
		},
		{
			MethodName: "SetInputName",
			Handler:    _OBS_SetInputName_Handler,
		},
		{
			MethodName: "GetInputDefaultSettings",
			Handler:    _OBS_GetInputDefaultSettings_Handler,
		},
		{
			MethodName: "GetInputSettings",
			Handler:    _OBS_GetInputSettings_Handler,
		},
		{
			MethodName: "SetInputSettings",
			Handler:    _OBS_SetInputSettings_Handler,
		},
		{
			MethodName: "GetInputMute",
			Handler:    _OBS_GetInputMute_Handler,
		},
		{
			MethodName: "SetInputMute",
			Handler:    _OBS_SetInputMute_Handler,
		},
		{
			MethodName: "ToggleInputMute",
			Handler:    _OBS_ToggleInputMute_Handler,
		},
		{
			MethodName: "GetInputVolume",
			Handler:    _OBS_GetInputVolume_Handler,
		},
		{
			MethodName: "SetInputVolume",
			Handler:    _OBS_SetInputVolume_Handler,
		},
		{
			MethodName: "GetInputAudioBalance",
			Handler:    _OBS_GetInputAudioBalance_Handler,
		},
		{
			MethodName: "SetInputAudioBalance",
			Handler:    _OBS_SetInputAudioBalance_Handler,
		},
		{
			MethodName: "GetInputAudioSyncOffset",
			Handler:    _OBS_GetInputAudioSyncOffset_Handler,
		},
		{
			MethodName: "SetInputAudioSyncOffset",
			Handler:    _OBS_SetInputAudioSyncOffset_Handler,
		},
		{
			MethodName: "GetInputAudioMonitorType",
			Handler:    _OBS_GetInputAudioMonitorType_Handler,
		},
		{
			MethodName: "SetInputAudioMonitorType",
			Handler:    _OBS_SetInputAudioMonitorType_Handler,
		},
		{
			MethodName: "GetInputAudioTracks",
			Handler:    _OBS_GetInputAudioTracks_Handler,
		},
		{
			MethodName: "SetInputAudioTracks",
			Handler:    _OBS_SetInputAudioTracks_Handler,
		},
		{
			MethodName: "GetInputPropertiesListPropertyItems",
			Handler:    _OBS_GetInputPropertiesListPropertyItems_Handler,
		},
		{
			MethodName: "PressInputPropertiesButton",
			Handler:    _OBS_PressInputPropertiesButton_Handler,
		},
		{
			MethodName: "GetMediaInputStatus",
			Handler:    _OBS_GetMediaInputStatus_Handler,
		},
		{
			MethodName: "SetMediaInputCursor",
			Handler:    _OBS_SetMediaInputCursor_Handler,
		},
		{
			MethodName: "OffsetMediaInputCursor",
			Handler:    _OBS_OffsetMediaInputCursor_Handler,
		},
		{
			MethodName: "TriggerMediaInputAction",
			Handler:    _OBS_TriggerMediaInputAction_Handler,
		},
		{
			MethodName: "GetVirtualCamStatus",
			Handler:    _OBS_GetVirtualCamStatus_Handler,
		},
		{
			MethodName: "ToggleVirtualCam",
			Handler:    _OBS_ToggleVirtualCam_Handler,
		},
		{
			MethodName: "StartVirtualCam",
			Handler:    _OBS_StartVirtualCam_Handler,
		},
		{
			MethodName: "StopVirtualCam",
			Handler:    _OBS_StopVirtualCam_Handler,
		},
		{
			MethodName: "GetReplayBufferStatus",
			Handler:    _OBS_GetReplayBufferStatus_Handler,
		},
		{
			MethodName: "ToggleReplayBuffer",
			Handler:    _OBS_ToggleReplayBuffer_Handler,
		},
		{
			MethodName: "StartReplayBuffer",
			Handler:    _OBS_StartReplayBuffer_Handler,
		},
		{
			MethodName: "StopReplayBuffer",
			Handler:    _OBS_StopReplayBuffer_Handler,
		},
		{
			MethodName: "SaveReplayBuffer",
			Handler:    _OBS_SaveReplayBuffer_Handler,
		},
		{
			MethodName: "GetLastReplayBufferReplay",
			Handler:    _OBS_GetLastReplayBufferReplay_Handler,
		},
		{
			MethodName: "GetOutputList",
			Handler:    _OBS_GetOutputList_Handler,
		},
		{
			MethodName: "GetOutputStatus",
			Handler:    _OBS_GetOutputStatus_Handler,
		},
		{
			MethodName: "ToggleOutput",
			Handler:    _OBS_ToggleOutput_Handler,
		},
		{
			MethodName: "StartOutput",
			Handler:    _OBS_StartOutput_Handler,
		},
		{
			MethodName: "StopOutput",
			Handler:    _OBS_StopOutput_Handler,
		},
		{
			MethodName: "GetOutputSettings",
			Handler:    _OBS_GetOutputSettings_Handler,
		},
		{
			MethodName: "SetOutputSettings",
			Handler:    _OBS_SetOutputSettings_Handler,
		},
		{
			MethodName: "GetRecordStatus",
			Handler:    _OBS_GetRecordStatus_Handler,
		},
		{
			MethodName: "ToggleRecord",
			Handler:    _OBS_ToggleRecord_Handler,
		},
		{
			MethodName: "StartRecord",
			Handler:    _OBS_StartRecord_Handler,
		},
		{
			MethodName: "StopRecord",
			Handler:    _OBS_StopRecord_Handler,
		},
		{
			MethodName: "ToggleRecordPause",
			Handler:    _OBS_ToggleRecordPause_Handler,
		},
		{
			MethodName: "PauseRecord",
			Handler:    _OBS_PauseRecord_Handler,
		},
		{
			MethodName: "ResumeRecord",
			Handler:    _OBS_ResumeRecord_Handler,
		},
		{
			MethodName: "SplitRecordFile",
			Handler:    _OBS_SplitRecordFile_Handler,
		},
		{
			MethodName: "CreateRecordChapter",
			Handler:    _OBS_CreateRecordChapter_Handler,
		},
		{
			MethodName: "GetSceneItemList",
			Handler:    _OBS_GetSceneItemList_Handler,
		},
		{
			MethodName: "GetGroupSceneItemList",
			Handler:    _OBS_GetGroupSceneItemList_Handler,
		},
		{
			MethodName: "GetSceneItemId",
			Handler:    _OBS_GetSceneItemId_Handler,
		},
		{
			MethodName: "GetSceneItemSource",
			Handler:    _OBS_GetSceneItemSource_Handler,
		},
		{
			MethodName: "CreateSceneItem",
			Handler:    _OBS_CreateSceneItem_Handler,
		},
		{
			MethodName: "RemoveSceneItem",
			Handler:    _OBS_RemoveSceneItem_Handler,
		},
		{
			MethodName: "DuplicateSceneItem",
			Handler:    _OBS_DuplicateSceneItem_Handler,
		},
		{
			MethodName: "GetSceneItemTransform",
			Handler:    _OBS_GetSceneItemTransform_Handler,
		},
		{
			MethodName: "SetSceneItemTransform",
			Handler:    _OBS_SetSceneItemTransform_Handler,
		},
		{
			MethodName: "GetSceneItemEnabled",
			Handler:    _OBS_GetSceneItemEnabled_Handler,
		},
		{
			MethodName: "SetSceneItemEnabled",
			Handler:    _OBS_SetSceneItemEnabled_Handler,
		},
		{
			MethodName: "GetSceneItemLocked",
			Handler:    _OBS_GetSceneItemLocked_Handler,
		},
		{
			MethodName: "SetSceneItemLocked",
			Handler:    _OBS_SetSceneItemLocked_Handler,
		},
		{
			MethodName: "GetSceneItemIndex",
			Handler:    _OBS_GetSceneItemIndex_Handler,
		},
		{
			MethodName: "SetSceneItemIndex",
			Handler:    _OBS_SetSceneItemIndex_Handler,
		},
		{
			MethodName: "GetSceneItemBlendMode",
			Handler:    _OBS_GetSceneItemBlendMode_Handler,
		},
		{
			MethodName: "SetSceneItemBlendMode",
			Handler:    _OBS_SetSceneItemBlendMode_Handler,
		},
		{
			MethodName: "GetSceneList",
			Handler:    _OBS_GetSceneList_Handler,
		},
		{
			MethodName: "GetGroupList",
			Handler:    _OBS_GetGroupList_Handler,
		},
		{
			MethodName: "GetCurrentProgramScene",
			Handler:    _OBS_GetCurrentProgramScene_Handler,
		},
		{
			MethodName: "SetCurrentProgramScene",
			Handler:    _OBS_SetCurrentProgramScene_Handler,
		},
		{
			MethodName: "GetCurrentPreviewScene",
			Handler:    _OBS_GetCurrentPreviewScene_Handler,
		},
		{
			MethodName: "SetCurrentPreviewScene",
			Handler:    _OBS_SetCurrentPreviewScene_Handler,
		},
		{
			MethodName: "CreateScene",
			Handler:    _OBS_CreateScene_Handler,
		},
		{
			MethodName: "RemoveScene",
			Handler:    _OBS_RemoveScene_Handler,
		},
		{
			MethodName: "SetSceneName",
			Handler:    _OBS_SetSceneName_Handler,
		},
		{
			MethodName: "GetSceneSceneTransitionOverride",
			Handler:    _OBS_GetSceneSceneTransitionOverride_Handler,
		},
		{
			MethodName: "SetSceneSceneTransitionOverride",
			Handler:    _OBS_SetSceneSceneTransitionOverride_Handler,
		},
		{
			MethodName: "GetSourceActive",
			Handler:    _OBS_GetSourceActive_Handler,
		},
		{
			MethodName: "GetSourceScreenshot",
			Handler:    _OBS_GetSourceScreenshot_Handler,
		},
		{
			MethodName: "SaveSourceScreenshot",
			Handler:    _OBS_SaveSourceScreenshot_Handler,
		},
		{
			MethodName: "GetStreamStatus",
			Handler:    _OBS_GetStreamStatus_Handler,
		},
		{
			MethodName: "ToggleStream",
			Handler:    _OBS_ToggleStream_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _OBS_StartStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _OBS_StopStream_Handler,
		},
		{
			MethodName: "SendStreamCaption",
			Handler:    _OBS_SendStreamCaption_Handler,
		},
		{
			MethodName: "GetTransitionKindList",
			Handler:    _OBS_GetTransitionKindList_Handler,
		},
		{
			MethodName: "GetSceneTransitionList",
			Handler:    _OBS_GetSceneTransitionList_Handler,
		},
		{
			MethodName: "GetCurrentSceneTransition",
			Handler:    _OBS_GetCurrentSceneTransition_Handler,
		},
		{
			MethodName: "SetCurrentSceneTransition",
			Handler:    _OBS_SetCurrentSceneTransition_Handler,
		},
		{
			MethodName: "SetCurrentSceneTransitionDuration",
			Handler:    _OBS_SetCurrentSceneTransitionDuration_Handler,
		},
		{
			MethodName: "SetCurrentSceneTransitionSettings",
			Handler:    _OBS_SetCurrentSceneTransitionSettings_Handler,
		},
		{
			MethodName: "GetCurrentSceneTransitionCursor",
			Handler:    _OBS_GetCurrentSceneTransitionCursor_Handler,
		},
		{
			MethodName: "TriggerStudioModeTransition",
			Handler:    _OBS_TriggerStudioModeTransition_Handler,
		},
		{
			MethodName: "SetTBarPosition",
			Handler:    _OBS_SetTBarPosition_Handler,
		},
		{
			MethodName: "GetStudioModeEnabled",
			Handler:    _OBS_GetStudioModeEnabled_Handler,
		},
		{
			MethodName: "SetStudioModeEnabled",
			Handler:    _OBS_SetStudioModeEnabled_Handler,
		},
		{
			MethodName: "OpenInputPropertiesDialog",
			Handler:    _OBS_OpenInputPropertiesDialog_Handler,
		},
		{
			MethodName: "OpenInputFiltersDialog",
			Handler:    _OBS_OpenInputFiltersDialog_Handler,
		},
		{
			MethodName: "OpenInputInteractDialog",
			Handler:    _OBS_OpenInputInteractDialog_Handler,
		},
		{
			MethodName: "GetMonitorList",
			Handler:    _OBS_GetMonitorList_Handler,
		},
		{
			MethodName: "OpenVideoMixProjector",
			Handler:    _OBS_OpenVideoMixProjector_Handler,
		},
		{
			MethodName: "OpenSourceProjector",
			Handler:    _OBS_OpenSourceProjector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/obs.proto",
}
