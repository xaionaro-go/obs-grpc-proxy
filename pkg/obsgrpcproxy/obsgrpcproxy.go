// This file was automatically generated by github.com/xaionaro-go/obs-grpc-proxy/scripts/generate

package obsgrpcproxy

import (
	"context"
	"fmt"

	goobs "github.com/andreykaipov/goobs"
	obsgrpc "github.com/xaionaro-go/obs-grpc-proxy/protobuf/go/obs_grpc"
)

type GetClientFunc func() (*goobs.Client, context.CancelFunc, error)

type Proxy struct {
	obsgrpc.UnimplementedOBSServer

	GetClient GetClientFunc
}

var _ obsgrpc.OBSServer = (*Proxy)(nil)

func New(getClient GetClientFunc) *Proxy {
	return &Proxy{
		GetClient: getClient,
	}
}

func ptr[T any](in T) *T {
	return &in
}

func anyGo2Protobuf(in any) *obsgrpc.Any {
	var result obsgrpc.Any
	switch in := in.(type) {
	case []byte:
		result.Union = &obsgrpc.Any_String_{String_: in}
	case int64:
		result.Union = &obsgrpc.Any_Number{Number: in}
	default:
		panic(fmt.Errorf("unexpected type %T", in))
	}
	return &result
}

func toAbstractObject[T any](in T) *obsgrpc.AbstractObject {
	return nil
}

func fromAbstractObject[T any](in *obsgrpc.AbstractObject) T {
	var zeroValue T
	return zeroValue
}

func toAbstractObjects[T any](in []T) []*obsgrpc.AbstractObject {
	return nil
}

func fromAbstractObjects[T any](in []*obsgrpc.AbstractObject) []T {
	return nil
}

func stringSlice2BytesSlice(in []string) [][]byte {
	var result [][]byte
	for _, s := range in {
		result = append(result, []byte(s))
	}
	return result
}

func ptrInt64ToFloat64(in *int64) *float64 {
	if in == nil {
		return nil
	}

	f := float64(*in)
	return &f
}

func ptrInt64ToInt(in *int64) *int {
	if in == nil {
		return nil
	}

	i := int(*in)
	return &i
}
