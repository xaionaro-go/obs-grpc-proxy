// This file was automatically generated by github.com/xaionaro-go/obs-grpc-proxy/scripts/generate

package obsgrpcproxy

import (
	"context"
	"fmt"

	config "github.com/andreykaipov/goobs/api/requests/config"
	filters "github.com/andreykaipov/goobs/api/requests/filters"
	general "github.com/andreykaipov/goobs/api/requests/general"
	inputs "github.com/andreykaipov/goobs/api/requests/inputs"
	mediainputs "github.com/andreykaipov/goobs/api/requests/mediainputs"
	outputs "github.com/andreykaipov/goobs/api/requests/outputs"
	record "github.com/andreykaipov/goobs/api/requests/record"
	sceneitems "github.com/andreykaipov/goobs/api/requests/sceneitems"
	scenes "github.com/andreykaipov/goobs/api/requests/scenes"
	sources "github.com/andreykaipov/goobs/api/requests/sources"
	stream "github.com/andreykaipov/goobs/api/requests/stream"
	transitions "github.com/andreykaipov/goobs/api/requests/transitions"
	ui "github.com/andreykaipov/goobs/api/requests/ui"
	typedefs "github.com/andreykaipov/goobs/api/typedefs"
	obsgrpc "github.com/xaionaro-go/obs-grpc-proxy/protobuf/go/obs_grpc"
)

var _ = (*typedefs.Input)(nil)

func (p *Proxy) GetPersistentData(ctx context.Context, req *obsgrpc.GetPersistentDataRequest) (*obsgrpc.GetPersistentDataResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetPersistentDataParams{
		Realm:    ptr((string)(req.Realm)),
		SlotName: ptr(req.SlotName),
	}
	resp, err := client.Config.GetPersistentData(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetPersistentDataResponse{
		SlotValue: anyGo2Protobuf(resp.SlotValue),
	}
	return result, nil
}
func (p *Proxy) SetPersistentData(ctx context.Context, req *obsgrpc.SetPersistentDataRequest) (*obsgrpc.SetPersistentDataResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetPersistentDataParams{
		Realm:     ptr((string)(req.Realm)),
		SlotName:  ptr(req.SlotName),
		SlotValue: req.SlotValue,
	}
	_, err = client.Config.SetPersistentData(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetPersistentDataResponse{}
	return result, nil
}
func (p *Proxy) GetSceneCollectionList(ctx context.Context, req *obsgrpc.GetSceneCollectionListRequest) (*obsgrpc.GetSceneCollectionListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetSceneCollectionListParams{}
	resp, err := client.Config.GetSceneCollectionList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneCollectionListResponse{
		CurrentSceneCollectionName: resp.CurrentSceneCollectionName,
		SceneCollections:           stringSlice2BytesSlice(resp.SceneCollections),
	}
	return result, nil
}
func (p *Proxy) SetCurrentSceneCollection(ctx context.Context, req *obsgrpc.SetCurrentSceneCollectionRequest) (*obsgrpc.SetCurrentSceneCollectionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetCurrentSceneCollectionParams{
		SceneCollectionName: ptr(req.SceneCollectionName),
	}
	_, err = client.Config.SetCurrentSceneCollection(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentSceneCollectionResponse{}
	return result, nil
}
func (p *Proxy) CreateSceneCollection(ctx context.Context, req *obsgrpc.CreateSceneCollectionRequest) (*obsgrpc.CreateSceneCollectionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.CreateSceneCollectionParams{
		SceneCollectionName: ptr(req.SceneCollectionName),
	}
	_, err = client.Config.CreateSceneCollection(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateSceneCollectionResponse{}
	return result, nil
}
func (p *Proxy) GetProfileList(ctx context.Context, req *obsgrpc.GetProfileListRequest) (*obsgrpc.GetProfileListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetProfileListParams{}
	resp, err := client.Config.GetProfileList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetProfileListResponse{
		CurrentProfileName: resp.CurrentProfileName,
		Profiles:           stringSlice2BytesSlice(resp.Profiles),
	}
	return result, nil
}
func (p *Proxy) SetCurrentProfile(ctx context.Context, req *obsgrpc.SetCurrentProfileRequest) (*obsgrpc.SetCurrentProfileResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetCurrentProfileParams{
		ProfileName: ptr(req.ProfileName),
	}
	_, err = client.Config.SetCurrentProfile(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentProfileResponse{}
	return result, nil
}
func (p *Proxy) CreateProfile(ctx context.Context, req *obsgrpc.CreateProfileRequest) (*obsgrpc.CreateProfileResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.CreateProfileParams{
		ProfileName: ptr(req.ProfileName),
	}
	_, err = client.Config.CreateProfile(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateProfileResponse{}
	return result, nil
}
func (p *Proxy) RemoveProfile(ctx context.Context, req *obsgrpc.RemoveProfileRequest) (*obsgrpc.RemoveProfileResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.RemoveProfileParams{
		ProfileName: ptr(req.ProfileName),
	}
	_, err = client.Config.RemoveProfile(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.RemoveProfileResponse{}
	return result, nil
}
func (p *Proxy) GetProfileParameter(ctx context.Context, req *obsgrpc.GetProfileParameterRequest) (*obsgrpc.GetProfileParameterResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetProfileParameterParams{
		ParameterCategory: ptr((string)(req.ParameterCategory)),
		ParameterName:     ptr(req.ParameterName),
	}
	resp, err := client.Config.GetProfileParameter(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetProfileParameterResponse{
		ParameterValue:        ([]byte)(resp.ParameterValue),
		DefaultParameterValue: ([]byte)(resp.DefaultParameterValue),
	}
	return result, nil
}
func (p *Proxy) SetProfileParameter(ctx context.Context, req *obsgrpc.SetProfileParameterRequest) (*obsgrpc.SetProfileParameterResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetProfileParameterParams{
		ParameterCategory: ptr((string)(req.ParameterCategory)),
		ParameterName:     ptr(req.ParameterName),
		ParameterValue:    ptr((string)(req.ParameterValue)),
	}
	_, err = client.Config.SetProfileParameter(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetProfileParameterResponse{}
	return result, nil
}
func (p *Proxy) GetVideoSettings(ctx context.Context, req *obsgrpc.GetVideoSettingsRequest) (*obsgrpc.GetVideoSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetVideoSettingsParams{}
	resp, err := client.Config.GetVideoSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetVideoSettingsResponse{
		FpsNumerator:   (int64)(resp.FpsNumerator),
		FpsDenominator: (int64)(resp.FpsDenominator),
		BaseWidth:      (int64)(resp.BaseWidth),
		BaseHeight:     (int64)(resp.BaseHeight),
		OutputWidth:    (int64)(resp.OutputWidth),
		OutputHeight:   (int64)(resp.OutputHeight),
	}
	return result, nil
}
func (p *Proxy) SetVideoSettings(ctx context.Context, req *obsgrpc.SetVideoSettingsRequest) (*obsgrpc.SetVideoSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetVideoSettingsParams{
		FpsNumerator:   ptrInt64ToFloat64(req.FpsNumerator),
		FpsDenominator: ptrInt64ToFloat64(req.FpsDenominator),
		BaseWidth:      ptrInt64ToFloat64(req.BaseWidth),
		BaseHeight:     ptrInt64ToFloat64(req.BaseHeight),
		OutputWidth:    ptrInt64ToFloat64(req.OutputWidth),
		OutputHeight:   ptrInt64ToFloat64(req.OutputHeight),
	}
	_, err = client.Config.SetVideoSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetVideoSettingsResponse{}
	return result, nil
}
func (p *Proxy) GetStreamServiceSettings(ctx context.Context, req *obsgrpc.GetStreamServiceSettingsRequest) (*obsgrpc.GetStreamServiceSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetStreamServiceSettingsParams{}
	resp, err := client.Config.GetStreamServiceSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetStreamServiceSettingsResponse{
		StreamServiceType:     ([]byte)(resp.StreamServiceType),
		StreamServiceSettings: toAbstractObject[*typedefs.StreamServiceSettings](resp.StreamServiceSettings),
	}
	return result, nil
}
func (p *Proxy) SetStreamServiceSettings(ctx context.Context, req *obsgrpc.SetStreamServiceSettingsRequest) (*obsgrpc.SetStreamServiceSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetStreamServiceSettingsParams{
		StreamServiceType:     ptr((string)(req.StreamServiceType)),
		StreamServiceSettings: fromAbstractObject[*typedefs.StreamServiceSettings](req.StreamServiceSettings),
	}
	_, err = client.Config.SetStreamServiceSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetStreamServiceSettingsResponse{}
	return result, nil
}
func (p *Proxy) GetRecordDirectory(ctx context.Context, req *obsgrpc.GetRecordDirectoryRequest) (*obsgrpc.GetRecordDirectoryResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.GetRecordDirectoryParams{}
	resp, err := client.Config.GetRecordDirectory(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetRecordDirectoryResponse{
		RecordDirectory: ([]byte)(resp.RecordDirectory),
	}
	return result, nil
}
func (p *Proxy) SetRecordDirectory(ctx context.Context, req *obsgrpc.SetRecordDirectoryRequest) (*obsgrpc.SetRecordDirectoryResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &config.SetRecordDirectoryParams{
		RecordDirectory: ptr((string)(req.RecordDirectory)),
	}
	_, err = client.Config.SetRecordDirectory(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetRecordDirectoryResponse{}
	return result, nil
}
func (p *Proxy) GetSourceFilterKindList(ctx context.Context, req *obsgrpc.GetSourceFilterKindListRequest) (*obsgrpc.GetSourceFilterKindListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.GetSourceFilterKindListParams{}
	resp, err := client.Filters.GetSourceFilterKindList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSourceFilterKindListResponse{
		SourceFilterKinds: resp.SourceFilterKinds,
	}
	return result, nil
}
func (p *Proxy) GetSourceFilterList(ctx context.Context, req *obsgrpc.GetSourceFilterListRequest) (*obsgrpc.GetSourceFilterListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.GetSourceFilterListParams{
		SourceName: req.SourceName,
		SourceUuid: req.SourceUUID,
	}
	resp, err := client.Filters.GetSourceFilterList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSourceFilterListResponse{
		Filters: toAbstractObjects[*typedefs.Filter](resp.Filters),
	}
	return result, nil
}
func (p *Proxy) GetSourceFilterDefaultSettings(ctx context.Context, req *obsgrpc.GetSourceFilterDefaultSettingsRequest) (*obsgrpc.GetSourceFilterDefaultSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.GetSourceFilterDefaultSettingsParams{
		FilterKind: ptr(req.FilterKind),
	}
	resp, err := client.Filters.GetSourceFilterDefaultSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSourceFilterDefaultSettingsResponse{
		DefaultFilterSettings: toAbstractObject[map[string]any](resp.DefaultFilterSettings),
	}
	return result, nil
}
func (p *Proxy) CreateSourceFilter(ctx context.Context, req *obsgrpc.CreateSourceFilterRequest) (*obsgrpc.CreateSourceFilterResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.CreateSourceFilterParams{
		SourceName:     req.SourceName,
		SourceUuid:     req.SourceUUID,
		FilterName:     ptr(req.FilterName),
		FilterKind:     ptr(req.FilterKind),
		FilterSettings: fromAbstractObject[map[string]any](req.FilterSettings),
	}
	_, err = client.Filters.CreateSourceFilter(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateSourceFilterResponse{}
	return result, nil
}
func (p *Proxy) RemoveSourceFilter(ctx context.Context, req *obsgrpc.RemoveSourceFilterRequest) (*obsgrpc.RemoveSourceFilterResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.RemoveSourceFilterParams{
		SourceName: req.SourceName,
		SourceUuid: req.SourceUUID,
		FilterName: ptr(req.FilterName),
	}
	_, err = client.Filters.RemoveSourceFilter(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.RemoveSourceFilterResponse{}
	return result, nil
}
func (p *Proxy) SetSourceFilterName(ctx context.Context, req *obsgrpc.SetSourceFilterNameRequest) (*obsgrpc.SetSourceFilterNameResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.SetSourceFilterNameParams{
		SourceName:    req.SourceName,
		SourceUuid:    req.SourceUUID,
		FilterName:    ptr(req.FilterName),
		NewFilterName: ptr(req.NewFilterName),
	}
	_, err = client.Filters.SetSourceFilterName(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSourceFilterNameResponse{}
	return result, nil
}
func (p *Proxy) GetSourceFilter(ctx context.Context, req *obsgrpc.GetSourceFilterRequest) (*obsgrpc.GetSourceFilterResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.GetSourceFilterParams{
		SourceName: req.SourceName,
		SourceUuid: req.SourceUUID,
		FilterName: ptr(req.FilterName),
	}
	resp, err := client.Filters.GetSourceFilter(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSourceFilterResponse{
		FilterEnabled:  resp.FilterEnabled,
		FilterIndex:    (int64)(resp.FilterIndex),
		FilterKind:     resp.FilterKind,
		FilterSettings: toAbstractObject[map[string]any](resp.FilterSettings),
	}
	return result, nil
}
func (p *Proxy) SetSourceFilterIndex(ctx context.Context, req *obsgrpc.SetSourceFilterIndexRequest) (*obsgrpc.SetSourceFilterIndexResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.SetSourceFilterIndexParams{
		SourceName:  req.SourceName,
		SourceUuid:  req.SourceUUID,
		FilterName:  ptr(req.FilterName),
		FilterIndex: ptr((int)(req.FilterIndex)),
	}
	_, err = client.Filters.SetSourceFilterIndex(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSourceFilterIndexResponse{}
	return result, nil
}
func (p *Proxy) SetSourceFilterSettings(ctx context.Context, req *obsgrpc.SetSourceFilterSettingsRequest) (*obsgrpc.SetSourceFilterSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.SetSourceFilterSettingsParams{
		SourceName:     req.SourceName,
		SourceUuid:     req.SourceUUID,
		FilterName:     ptr(req.FilterName),
		FilterSettings: fromAbstractObject[map[string]any](req.FilterSettings),
		Overlay:        req.Overlay,
	}
	_, err = client.Filters.SetSourceFilterSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSourceFilterSettingsResponse{}
	return result, nil
}
func (p *Proxy) SetSourceFilterEnabled(ctx context.Context, req *obsgrpc.SetSourceFilterEnabledRequest) (*obsgrpc.SetSourceFilterEnabledResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &filters.SetSourceFilterEnabledParams{
		SourceName:    req.SourceName,
		SourceUuid:    req.SourceUUID,
		FilterName:    ptr(req.FilterName),
		FilterEnabled: ptr(req.FilterEnabled),
	}
	_, err = client.Filters.SetSourceFilterEnabled(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSourceFilterEnabledResponse{}
	return result, nil
}
func (p *Proxy) GetVersion(ctx context.Context, req *obsgrpc.GetVersionRequest) (*obsgrpc.GetVersionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.GetVersionParams{}
	resp, err := client.General.GetVersion(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetVersionResponse{
		ObsVersion:            ([]byte)(resp.ObsVersion),
		ObsWebSocketVersion:   ([]byte)(resp.ObsWebSocketVersion),
		RpcVersion:            (int64)(resp.RpcVersion),
		AvailableRequests:     stringSlice2BytesSlice(resp.AvailableRequests),
		SupportedImageFormats: stringSlice2BytesSlice(resp.SupportedImageFormats),
		Platform:              ([]byte)(resp.Platform),
		PlatformDescription:   ([]byte)(resp.PlatformDescription),
	}
	return result, nil
}
func (p *Proxy) GetStats(ctx context.Context, req *obsgrpc.GetStatsRequest) (*obsgrpc.GetStatsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.GetStatsParams{}
	resp, err := client.General.GetStats(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetStatsResponse{
		CpuUsage:                         (int64)(resp.CpuUsage),
		MemoryUsage:                      (int64)(resp.MemoryUsage),
		AvailableDiskSpace:               (int64)(resp.AvailableDiskSpace),
		ActiveFps:                        (int64)(resp.ActiveFps),
		AverageFrameRenderTime:           (int64)(resp.AverageFrameRenderTime),
		RenderSkippedFrames:              (int64)(resp.RenderSkippedFrames),
		RenderTotalFrames:                (int64)(resp.RenderTotalFrames),
		OutputSkippedFrames:              (int64)(resp.OutputSkippedFrames),
		OutputTotalFrames:                (int64)(resp.OutputTotalFrames),
		WebSocketSessionIncomingMessages: (int64)(resp.WebSocketSessionIncomingMessages),
		WebSocketSessionOutgoingMessages: (int64)(resp.WebSocketSessionOutgoingMessages),
	}
	return result, nil
}
func (p *Proxy) BroadcastCustomEvent(ctx context.Context, req *obsgrpc.BroadcastCustomEventRequest) (*obsgrpc.BroadcastCustomEventResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.BroadcastCustomEventParams{
		EventData: fromAbstractObject[map[string]any](req.EventData),
	}
	_, err = client.General.BroadcastCustomEvent(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.BroadcastCustomEventResponse{}
	return result, nil
}
func (p *Proxy) CallVendorRequest(ctx context.Context, req *obsgrpc.CallVendorRequestRequest) (*obsgrpc.CallVendorRequestResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.CallVendorRequestParams{
		VendorName:  ptr(req.VendorName),
		RequestType: ptr((string)(req.RequestType)),
		RequestData: fromAbstractObject[map[string]any](req.RequestData),
	}
	resp, err := client.General.CallVendorRequest(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CallVendorRequestResponse{
		VendorName:   resp.VendorName,
		RequestType:  ([]byte)(resp.RequestType),
		ResponseData: toAbstractObject[map[string]any](resp.ResponseData),
	}
	return result, nil
}
func (p *Proxy) GetHotkeyList(ctx context.Context, req *obsgrpc.GetHotkeyListRequest) (*obsgrpc.GetHotkeyListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.GetHotkeyListParams{}
	resp, err := client.General.GetHotkeyList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetHotkeyListResponse{
		Hotkeys: stringSlice2BytesSlice(resp.Hotkeys),
	}
	return result, nil
}
func (p *Proxy) TriggerHotkeyByName(ctx context.Context, req *obsgrpc.TriggerHotkeyByNameRequest) (*obsgrpc.TriggerHotkeyByNameResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.TriggerHotkeyByNameParams{
		HotkeyName:  ptr(req.HotkeyName),
		ContextName: req.ContextName,
	}
	_, err = client.General.TriggerHotkeyByName(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.TriggerHotkeyByNameResponse{}
	return result, nil
}
func (p *Proxy) TriggerHotkeyByKeySequence(ctx context.Context, req *obsgrpc.TriggerHotkeyByKeySequenceRequest) (*obsgrpc.TriggerHotkeyByKeySequenceResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.TriggerHotkeyByKeySequenceParams{
		KeyId:        req.KeyID,
		KeyModifiers: fromAbstractObject[*typedefs.KeyModifiers](req.KeyModifiers),
	}
	_, err = client.General.TriggerHotkeyByKeySequence(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.TriggerHotkeyByKeySequenceResponse{}
	return result, nil
}
func (p *Proxy) Sleep(ctx context.Context, req *obsgrpc.SleepRequest) (*obsgrpc.SleepResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &general.SleepParams{
		SleepMillis: ptrInt64ToFloat64(req.SleepMillis),
		SleepFrames: ptrInt64ToFloat64(req.SleepFrames),
	}
	_, err = client.General.Sleep(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SleepResponse{}
	return result, nil
}
func (p *Proxy) GetInputList(ctx context.Context, req *obsgrpc.GetInputListRequest) (*obsgrpc.GetInputListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputListParams{
		InputKind: req.InputKind,
	}
	resp, err := client.Inputs.GetInputList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputListResponse{
		Inputs: toAbstractObjects[*typedefs.Input](resp.Inputs),
	}
	return result, nil
}
func (p *Proxy) GetInputKindList(ctx context.Context, req *obsgrpc.GetInputKindListRequest) (*obsgrpc.GetInputKindListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputKindListParams{
		Unversioned: req.Unversioned,
	}
	resp, err := client.Inputs.GetInputKindList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputKindListResponse{
		InputKinds: resp.InputKinds,
	}
	return result, nil
}
func (p *Proxy) GetSpecialInputs(ctx context.Context, req *obsgrpc.GetSpecialInputsRequest) (*obsgrpc.GetSpecialInputsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetSpecialInputsParams{}
	resp, err := client.Inputs.GetSpecialInputs(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSpecialInputsResponse{
		Desktop1: ([]byte)(resp.Desktop1),
		Desktop2: ([]byte)(resp.Desktop2),
		Mic1:     ([]byte)(resp.Mic1),
		Mic2:     ([]byte)(resp.Mic2),
		Mic3:     ([]byte)(resp.Mic3),
		Mic4:     ([]byte)(resp.Mic4),
	}
	return result, nil
}
func (p *Proxy) CreateInput(ctx context.Context, req *obsgrpc.CreateInputRequest) (*obsgrpc.CreateInputResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.CreateInputParams{
		SceneName:        req.SceneName,
		SceneUuid:        req.SceneUUID,
		InputName:        ptr(req.InputName),
		InputKind:        ptr(req.InputKind),
		InputSettings:    fromAbstractObject[map[string]any](req.InputSettings),
		SceneItemEnabled: req.SceneItemEnabled,
	}
	resp, err := client.Inputs.CreateInput(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateInputResponse{
		InputUUID:   resp.InputUuid,
		SceneItemID: (int64)(resp.SceneItemId),
	}
	return result, nil
}
func (p *Proxy) RemoveInput(ctx context.Context, req *obsgrpc.RemoveInputRequest) (*obsgrpc.RemoveInputResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.RemoveInputParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	_, err = client.Inputs.RemoveInput(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.RemoveInputResponse{}
	return result, nil
}
func (p *Proxy) SetInputName(ctx context.Context, req *obsgrpc.SetInputNameRequest) (*obsgrpc.SetInputNameResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputNameParams{
		InputName:    req.InputName,
		InputUuid:    req.InputUUID,
		NewInputName: ptr(req.NewInputName),
	}
	_, err = client.Inputs.SetInputName(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputNameResponse{}
	return result, nil
}
func (p *Proxy) GetInputDefaultSettings(ctx context.Context, req *obsgrpc.GetInputDefaultSettingsRequest) (*obsgrpc.GetInputDefaultSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputDefaultSettingsParams{
		InputKind: ptr(req.InputKind),
	}
	resp, err := client.Inputs.GetInputDefaultSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputDefaultSettingsResponse{
		DefaultInputSettings: toAbstractObject[map[string]any](resp.DefaultInputSettings),
	}
	return result, nil
}
func (p *Proxy) GetInputSettings(ctx context.Context, req *obsgrpc.GetInputSettingsRequest) (*obsgrpc.GetInputSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputSettingsParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputSettingsResponse{
		InputSettings: toAbstractObject[map[string]any](resp.InputSettings),
		InputKind:     resp.InputKind,
	}
	return result, nil
}
func (p *Proxy) SetInputSettings(ctx context.Context, req *obsgrpc.SetInputSettingsRequest) (*obsgrpc.SetInputSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputSettingsParams{
		InputName:     req.InputName,
		InputUuid:     req.InputUUID,
		InputSettings: fromAbstractObject[map[string]any](req.InputSettings),
		Overlay:       req.Overlay,
	}
	_, err = client.Inputs.SetInputSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputSettingsResponse{}
	return result, nil
}
func (p *Proxy) GetInputMute(ctx context.Context, req *obsgrpc.GetInputMuteRequest) (*obsgrpc.GetInputMuteResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputMuteParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputMute(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputMuteResponse{
		InputMuted: resp.InputMuted,
	}
	return result, nil
}
func (p *Proxy) SetInputMute(ctx context.Context, req *obsgrpc.SetInputMuteRequest) (*obsgrpc.SetInputMuteResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputMuteParams{
		InputName:  req.InputName,
		InputUuid:  req.InputUUID,
		InputMuted: ptr(req.InputMuted),
	}
	_, err = client.Inputs.SetInputMute(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputMuteResponse{}
	return result, nil
}
func (p *Proxy) ToggleInputMute(ctx context.Context, req *obsgrpc.ToggleInputMuteRequest) (*obsgrpc.ToggleInputMuteResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.ToggleInputMuteParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.ToggleInputMute(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleInputMuteResponse{
		InputMuted: resp.InputMuted,
	}
	return result, nil
}
func (p *Proxy) GetInputVolume(ctx context.Context, req *obsgrpc.GetInputVolumeRequest) (*obsgrpc.GetInputVolumeResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputVolumeParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputVolume(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputVolumeResponse{
		InputVolumeMul: (int64)(resp.InputVolumeMul),
		InputVolumeDb:  (int64)(resp.InputVolumeDb),
	}
	return result, nil
}
func (p *Proxy) SetInputVolume(ctx context.Context, req *obsgrpc.SetInputVolumeRequest) (*obsgrpc.SetInputVolumeResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputVolumeParams{
		InputName:      req.InputName,
		InputUuid:      req.InputUUID,
		InputVolumeMul: ptrInt64ToFloat64(req.InputVolumeMul),
		InputVolumeDb:  ptrInt64ToFloat64(req.InputVolumeDb),
	}
	_, err = client.Inputs.SetInputVolume(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputVolumeResponse{}
	return result, nil
}
func (p *Proxy) GetInputAudioBalance(ctx context.Context, req *obsgrpc.GetInputAudioBalanceRequest) (*obsgrpc.GetInputAudioBalanceResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputAudioBalanceParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputAudioBalance(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputAudioBalanceResponse{
		InputAudioBalance: resp.InputAudioBalance,
	}
	return result, nil
}
func (p *Proxy) SetInputAudioBalance(ctx context.Context, req *obsgrpc.SetInputAudioBalanceRequest) (*obsgrpc.SetInputAudioBalanceResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputAudioBalanceParams{
		InputName:         req.InputName,
		InputUuid:         req.InputUUID,
		InputAudioBalance: ptr(req.InputAudioBalance),
	}
	_, err = client.Inputs.SetInputAudioBalance(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputAudioBalanceResponse{}
	return result, nil
}
func (p *Proxy) GetInputAudioSyncOffset(ctx context.Context, req *obsgrpc.GetInputAudioSyncOffsetRequest) (*obsgrpc.GetInputAudioSyncOffsetResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputAudioSyncOffsetParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputAudioSyncOffset(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputAudioSyncOffsetResponse{
		InputAudioSyncOffset: (int64)(resp.InputAudioSyncOffset),
	}
	return result, nil
}
func (p *Proxy) SetInputAudioSyncOffset(ctx context.Context, req *obsgrpc.SetInputAudioSyncOffsetRequest) (*obsgrpc.SetInputAudioSyncOffsetResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputAudioSyncOffsetParams{
		InputName:            req.InputName,
		InputUuid:            req.InputUUID,
		InputAudioSyncOffset: ptr((float64)(req.InputAudioSyncOffset)),
	}
	_, err = client.Inputs.SetInputAudioSyncOffset(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputAudioSyncOffsetResponse{}
	return result, nil
}
func (p *Proxy) GetInputAudioMonitorType(ctx context.Context, req *obsgrpc.GetInputAudioMonitorTypeRequest) (*obsgrpc.GetInputAudioMonitorTypeResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputAudioMonitorTypeParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputAudioMonitorType(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputAudioMonitorTypeResponse{
		MonitorType: ([]byte)(resp.MonitorType),
	}
	return result, nil
}
func (p *Proxy) SetInputAudioMonitorType(ctx context.Context, req *obsgrpc.SetInputAudioMonitorTypeRequest) (*obsgrpc.SetInputAudioMonitorTypeResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputAudioMonitorTypeParams{
		InputName:   req.InputName,
		InputUuid:   req.InputUUID,
		MonitorType: ptr((string)(req.MonitorType)),
	}
	_, err = client.Inputs.SetInputAudioMonitorType(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputAudioMonitorTypeResponse{}
	return result, nil
}
func (p *Proxy) GetInputAudioTracks(ctx context.Context, req *obsgrpc.GetInputAudioTracksRequest) (*obsgrpc.GetInputAudioTracksResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputAudioTracksParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.Inputs.GetInputAudioTracks(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputAudioTracksResponse{
		InputAudioTracks: toAbstractObject[*typedefs.InputAudioTracks](resp.InputAudioTracks),
	}
	return result, nil
}
func (p *Proxy) SetInputAudioTracks(ctx context.Context, req *obsgrpc.SetInputAudioTracksRequest) (*obsgrpc.SetInputAudioTracksResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.SetInputAudioTracksParams{
		InputName:        req.InputName,
		InputUuid:        req.InputUUID,
		InputAudioTracks: fromAbstractObject[*typedefs.InputAudioTracks](req.InputAudioTracks),
	}
	_, err = client.Inputs.SetInputAudioTracks(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetInputAudioTracksResponse{}
	return result, nil
}
func (p *Proxy) GetInputPropertiesListPropertyItems(ctx context.Context, req *obsgrpc.GetInputPropertiesListPropertyItemsRequest) (*obsgrpc.GetInputPropertiesListPropertyItemsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.GetInputPropertiesListPropertyItemsParams{
		InputName:    req.InputName,
		InputUuid:    req.InputUUID,
		PropertyName: ptr(req.PropertyName),
	}
	resp, err := client.Inputs.GetInputPropertiesListPropertyItems(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetInputPropertiesListPropertyItemsResponse{
		PropertyItems: toAbstractObjects[*typedefs.PropertyItem](resp.PropertyItems),
	}
	return result, nil
}
func (p *Proxy) PressInputPropertiesButton(ctx context.Context, req *obsgrpc.PressInputPropertiesButtonRequest) (*obsgrpc.PressInputPropertiesButtonResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &inputs.PressInputPropertiesButtonParams{
		InputName:    req.InputName,
		InputUuid:    req.InputUUID,
		PropertyName: ptr(req.PropertyName),
	}
	_, err = client.Inputs.PressInputPropertiesButton(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.PressInputPropertiesButtonResponse{}
	return result, nil
}
func (p *Proxy) GetMediaInputStatus(ctx context.Context, req *obsgrpc.GetMediaInputStatusRequest) (*obsgrpc.GetMediaInputStatusResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &mediainputs.GetMediaInputStatusParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	resp, err := client.MediaInputs.GetMediaInputStatus(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetMediaInputStatusResponse{
		MediaState:    ([]byte)(resp.MediaState),
		MediaDuration: (int64)(resp.MediaDuration),
		MediaCursor:   (int64)(resp.MediaCursor),
	}
	return result, nil
}
func (p *Proxy) SetMediaInputCursor(ctx context.Context, req *obsgrpc.SetMediaInputCursorRequest) (*obsgrpc.SetMediaInputCursorResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &mediainputs.SetMediaInputCursorParams{
		InputName:   req.InputName,
		InputUuid:   req.InputUUID,
		MediaCursor: ptr((float64)(req.MediaCursor)),
	}
	_, err = client.MediaInputs.SetMediaInputCursor(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetMediaInputCursorResponse{}
	return result, nil
}
func (p *Proxy) OffsetMediaInputCursor(ctx context.Context, req *obsgrpc.OffsetMediaInputCursorRequest) (*obsgrpc.OffsetMediaInputCursorResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &mediainputs.OffsetMediaInputCursorParams{
		InputName:         req.InputName,
		InputUuid:         req.InputUUID,
		MediaCursorOffset: ptr((float64)(req.MediaCursorOffset)),
	}
	_, err = client.MediaInputs.OffsetMediaInputCursor(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.OffsetMediaInputCursorResponse{}
	return result, nil
}
func (p *Proxy) TriggerMediaInputAction(ctx context.Context, req *obsgrpc.TriggerMediaInputActionRequest) (*obsgrpc.TriggerMediaInputActionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &mediainputs.TriggerMediaInputActionParams{
		InputName:   req.InputName,
		InputUuid:   req.InputUUID,
		MediaAction: ptr(req.MediaAction),
	}
	_, err = client.MediaInputs.TriggerMediaInputAction(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.TriggerMediaInputActionResponse{}
	return result, nil
}
func (p *Proxy) GetVirtualCamStatus(ctx context.Context, req *obsgrpc.GetVirtualCamStatusRequest) (*obsgrpc.GetVirtualCamStatusResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.GetVirtualCamStatusParams{}
	resp, err := client.Outputs.GetVirtualCamStatus(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetVirtualCamStatusResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) ToggleVirtualCam(ctx context.Context, req *obsgrpc.ToggleVirtualCamRequest) (*obsgrpc.ToggleVirtualCamResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.ToggleVirtualCamParams{}
	resp, err := client.Outputs.ToggleVirtualCam(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleVirtualCamResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) StartVirtualCam(ctx context.Context, req *obsgrpc.StartVirtualCamRequest) (*obsgrpc.StartVirtualCamResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.StartVirtualCamParams{}
	_, err = client.Outputs.StartVirtualCam(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StartVirtualCamResponse{}
	return result, nil
}
func (p *Proxy) StopVirtualCam(ctx context.Context, req *obsgrpc.StopVirtualCamRequest) (*obsgrpc.StopVirtualCamResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.StopVirtualCamParams{}
	_, err = client.Outputs.StopVirtualCam(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StopVirtualCamResponse{}
	return result, nil
}
func (p *Proxy) GetReplayBufferStatus(ctx context.Context, req *obsgrpc.GetReplayBufferStatusRequest) (*obsgrpc.GetReplayBufferStatusResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.GetReplayBufferStatusParams{}
	resp, err := client.Outputs.GetReplayBufferStatus(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetReplayBufferStatusResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) ToggleReplayBuffer(ctx context.Context, req *obsgrpc.ToggleReplayBufferRequest) (*obsgrpc.ToggleReplayBufferResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.ToggleReplayBufferParams{}
	resp, err := client.Outputs.ToggleReplayBuffer(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleReplayBufferResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) StartReplayBuffer(ctx context.Context, req *obsgrpc.StartReplayBufferRequest) (*obsgrpc.StartReplayBufferResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.StartReplayBufferParams{}
	_, err = client.Outputs.StartReplayBuffer(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StartReplayBufferResponse{}
	return result, nil
}
func (p *Proxy) StopReplayBuffer(ctx context.Context, req *obsgrpc.StopReplayBufferRequest) (*obsgrpc.StopReplayBufferResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.StopReplayBufferParams{}
	_, err = client.Outputs.StopReplayBuffer(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StopReplayBufferResponse{}
	return result, nil
}
func (p *Proxy) SaveReplayBuffer(ctx context.Context, req *obsgrpc.SaveReplayBufferRequest) (*obsgrpc.SaveReplayBufferResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.SaveReplayBufferParams{}
	_, err = client.Outputs.SaveReplayBuffer(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SaveReplayBufferResponse{}
	return result, nil
}
func (p *Proxy) GetLastReplayBufferReplay(ctx context.Context, req *obsgrpc.GetLastReplayBufferReplayRequest) (*obsgrpc.GetLastReplayBufferReplayResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.GetLastReplayBufferReplayParams{}
	resp, err := client.Outputs.GetLastReplayBufferReplay(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetLastReplayBufferReplayResponse{
		SavedReplayPath: resp.SavedReplayPath,
	}
	return result, nil
}
func (p *Proxy) GetOutputList(ctx context.Context, req *obsgrpc.GetOutputListRequest) (*obsgrpc.GetOutputListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.GetOutputListParams{}
	resp, err := client.Outputs.GetOutputList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetOutputListResponse{
		Outputs: toAbstractObjects[*typedefs.Output](resp.Outputs),
	}
	return result, nil
}
func (p *Proxy) GetOutputStatus(ctx context.Context, req *obsgrpc.GetOutputStatusRequest) (*obsgrpc.GetOutputStatusResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.GetOutputStatusParams{
		OutputName: ptr(req.OutputName),
	}
	resp, err := client.Outputs.GetOutputStatus(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetOutputStatusResponse{
		OutputActive:        resp.OutputActive,
		OutputReconnecting:  resp.OutputReconnecting,
		OutputTimecode:      ([]byte)(resp.OutputTimecode),
		OutputDuration:      (int64)(resp.OutputDuration),
		OutputCongestion:    (int64)(resp.OutputCongestion),
		OutputBytes:         (int64)(resp.OutputBytes),
		OutputSkippedFrames: (int64)(resp.OutputSkippedFrames),
		OutputTotalFrames:   (int64)(resp.OutputTotalFrames),
	}
	return result, nil
}
func (p *Proxy) ToggleOutput(ctx context.Context, req *obsgrpc.ToggleOutputRequest) (*obsgrpc.ToggleOutputResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.ToggleOutputParams{
		OutputName: ptr(req.OutputName),
	}
	resp, err := client.Outputs.ToggleOutput(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleOutputResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) StartOutput(ctx context.Context, req *obsgrpc.StartOutputRequest) (*obsgrpc.StartOutputResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.StartOutputParams{
		OutputName: ptr(req.OutputName),
	}
	_, err = client.Outputs.StartOutput(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StartOutputResponse{}
	return result, nil
}
func (p *Proxy) StopOutput(ctx context.Context, req *obsgrpc.StopOutputRequest) (*obsgrpc.StopOutputResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.StopOutputParams{
		OutputName: ptr(req.OutputName),
	}
	_, err = client.Outputs.StopOutput(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StopOutputResponse{}
	return result, nil
}
func (p *Proxy) GetOutputSettings(ctx context.Context, req *obsgrpc.GetOutputSettingsRequest) (*obsgrpc.GetOutputSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.GetOutputSettingsParams{
		OutputName: ptr(req.OutputName),
	}
	resp, err := client.Outputs.GetOutputSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetOutputSettingsResponse{
		OutputSettings: toAbstractObject[map[string]any](resp.OutputSettings),
	}
	return result, nil
}
func (p *Proxy) SetOutputSettings(ctx context.Context, req *obsgrpc.SetOutputSettingsRequest) (*obsgrpc.SetOutputSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &outputs.SetOutputSettingsParams{
		OutputName:     ptr(req.OutputName),
		OutputSettings: fromAbstractObject[map[string]any](req.OutputSettings),
	}
	_, err = client.Outputs.SetOutputSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetOutputSettingsResponse{}
	return result, nil
}
func (p *Proxy) GetRecordStatus(ctx context.Context, req *obsgrpc.GetRecordStatusRequest) (*obsgrpc.GetRecordStatusResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.GetRecordStatusParams{}
	resp, err := client.Record.GetRecordStatus(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetRecordStatusResponse{
		OutputActive:   resp.OutputActive,
		OutputPaused:   resp.OutputPaused,
		OutputTimecode: ([]byte)(resp.OutputTimecode),
		OutputDuration: (int64)(resp.OutputDuration),
		OutputBytes:    (int64)(resp.OutputBytes),
	}
	return result, nil
}
func (p *Proxy) ToggleRecord(ctx context.Context, req *obsgrpc.ToggleRecordRequest) (*obsgrpc.ToggleRecordResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.ToggleRecordParams{}
	resp, err := client.Record.ToggleRecord(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleRecordResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) StartRecord(ctx context.Context, req *obsgrpc.StartRecordRequest) (*obsgrpc.StartRecordResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.StartRecordParams{}
	_, err = client.Record.StartRecord(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StartRecordResponse{}
	return result, nil
}
func (p *Proxy) StopRecord(ctx context.Context, req *obsgrpc.StopRecordRequest) (*obsgrpc.StopRecordResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.StopRecordParams{}
	resp, err := client.Record.StopRecord(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StopRecordResponse{
		OutputPath: resp.OutputPath,
	}
	return result, nil
}
func (p *Proxy) ToggleRecordPause(ctx context.Context, req *obsgrpc.ToggleRecordPauseRequest) (*obsgrpc.ToggleRecordPauseResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.ToggleRecordPauseParams{}
	_, err = client.Record.ToggleRecordPause(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleRecordPauseResponse{}
	return result, nil
}
func (p *Proxy) PauseRecord(ctx context.Context, req *obsgrpc.PauseRecordRequest) (*obsgrpc.PauseRecordResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.PauseRecordParams{}
	_, err = client.Record.PauseRecord(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.PauseRecordResponse{}
	return result, nil
}
func (p *Proxy) ResumeRecord(ctx context.Context, req *obsgrpc.ResumeRecordRequest) (*obsgrpc.ResumeRecordResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.ResumeRecordParams{}
	_, err = client.Record.ResumeRecord(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ResumeRecordResponse{}
	return result, nil
}
func (p *Proxy) SplitRecordFile(ctx context.Context, req *obsgrpc.SplitRecordFileRequest) (*obsgrpc.SplitRecordFileResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.SplitRecordFileParams{}
	_, err = client.Record.SplitRecordFile(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SplitRecordFileResponse{}
	return result, nil
}
func (p *Proxy) CreateRecordChapter(ctx context.Context, req *obsgrpc.CreateRecordChapterRequest) (*obsgrpc.CreateRecordChapterResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &record.CreateRecordChapterParams{
		ChapterName: req.ChapterName,
	}
	_, err = client.Record.CreateRecordChapter(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateRecordChapterResponse{}
	return result, nil
}
func (p *Proxy) GetSceneItemList(ctx context.Context, req *obsgrpc.GetSceneItemListRequest) (*obsgrpc.GetSceneItemListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemListParams{
		SceneName: req.SceneName,
		SceneUuid: req.SceneUUID,
	}
	resp, err := client.SceneItems.GetSceneItemList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemListResponse{
		SceneItems: toAbstractObjects[*typedefs.SceneItem](resp.SceneItems),
	}
	return result, nil
}
func (p *Proxy) GetGroupSceneItemList(ctx context.Context, req *obsgrpc.GetGroupSceneItemListRequest) (*obsgrpc.GetGroupSceneItemListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetGroupSceneItemListParams{
		SceneName: req.SceneName,
		SceneUuid: req.SceneUUID,
	}
	resp, err := client.SceneItems.GetGroupSceneItemList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetGroupSceneItemListResponse{
		SceneItems: toAbstractObjects[*typedefs.SceneItem](resp.SceneItems),
	}
	return result, nil
}
func (p *Proxy) GetSceneItemId(ctx context.Context, req *obsgrpc.GetSceneItemIdRequest) (*obsgrpc.GetSceneItemIdResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemIdParams{
		SceneName:    req.SceneName,
		SceneUuid:    req.SceneUUID,
		SourceName:   ptr(req.SourceName),
		SearchOffset: ptrInt64ToFloat64(req.SearchOffset),
	}
	resp, err := client.SceneItems.GetSceneItemId(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemIdResponse{
		SceneItemID: (int64)(resp.SceneItemId),
	}
	return result, nil
}
func (p *Proxy) GetSceneItemSource(ctx context.Context, req *obsgrpc.GetSceneItemSourceRequest) (*obsgrpc.GetSceneItemSourceResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemSourceParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	resp, err := client.SceneItems.GetSceneItemSource(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemSourceResponse{
		SourceName: resp.SourceName,
		SourceUUID: resp.SourceUuid,
	}
	return result, nil
}
func (p *Proxy) CreateSceneItem(ctx context.Context, req *obsgrpc.CreateSceneItemRequest) (*obsgrpc.CreateSceneItemResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.CreateSceneItemParams{
		SceneName:        req.SceneName,
		SceneUuid:        req.SceneUUID,
		SourceName:       req.SourceName,
		SourceUuid:       req.SourceUUID,
		SceneItemEnabled: req.SceneItemEnabled,
	}
	resp, err := client.SceneItems.CreateSceneItem(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateSceneItemResponse{
		SceneItemID: (int64)(resp.SceneItemId),
	}
	return result, nil
}
func (p *Proxy) RemoveSceneItem(ctx context.Context, req *obsgrpc.RemoveSceneItemRequest) (*obsgrpc.RemoveSceneItemResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.RemoveSceneItemParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	_, err = client.SceneItems.RemoveSceneItem(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.RemoveSceneItemResponse{}
	return result, nil
}
func (p *Proxy) DuplicateSceneItem(ctx context.Context, req *obsgrpc.DuplicateSceneItemRequest) (*obsgrpc.DuplicateSceneItemResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.DuplicateSceneItemParams{
		SceneName:            req.SceneName,
		SceneUuid:            req.SceneUUID,
		SceneItemId:          ptr((int)(req.SceneItemID)),
		DestinationSceneName: req.DestinationSceneName,
		DestinationSceneUuid: req.DestinationSceneUUID,
	}
	resp, err := client.SceneItems.DuplicateSceneItem(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.DuplicateSceneItemResponse{
		SceneItemID: (int64)(resp.SceneItemId),
	}
	return result, nil
}
func (p *Proxy) GetSceneItemTransform(ctx context.Context, req *obsgrpc.GetSceneItemTransformRequest) (*obsgrpc.GetSceneItemTransformResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemTransformParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	resp, err := client.SceneItems.GetSceneItemTransform(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemTransformResponse{
		SceneItemTransform: toAbstractObject[*typedefs.SceneItemTransform](resp.SceneItemTransform),
	}
	return result, nil
}
func (p *Proxy) SetSceneItemTransform(ctx context.Context, req *obsgrpc.SetSceneItemTransformRequest) (*obsgrpc.SetSceneItemTransformResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.SetSceneItemTransformParams{
		SceneName:          req.SceneName,
		SceneUuid:          req.SceneUUID,
		SceneItemId:        ptr((int)(req.SceneItemID)),
		SceneItemTransform: fromAbstractObject[*typedefs.SceneItemTransform](req.SceneItemTransform),
	}
	_, err = client.SceneItems.SetSceneItemTransform(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneItemTransformResponse{}
	return result, nil
}
func (p *Proxy) GetSceneItemEnabled(ctx context.Context, req *obsgrpc.GetSceneItemEnabledRequest) (*obsgrpc.GetSceneItemEnabledResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemEnabledParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	resp, err := client.SceneItems.GetSceneItemEnabled(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemEnabledResponse{
		SceneItemEnabled: resp.SceneItemEnabled,
	}
	return result, nil
}
func (p *Proxy) SetSceneItemEnabled(ctx context.Context, req *obsgrpc.SetSceneItemEnabledRequest) (*obsgrpc.SetSceneItemEnabledResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.SetSceneItemEnabledParams{
		SceneName:        req.SceneName,
		SceneUuid:        req.SceneUUID,
		SceneItemId:      ptr((int)(req.SceneItemID)),
		SceneItemEnabled: ptr(req.SceneItemEnabled),
	}
	_, err = client.SceneItems.SetSceneItemEnabled(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneItemEnabledResponse{}
	return result, nil
}
func (p *Proxy) GetSceneItemLocked(ctx context.Context, req *obsgrpc.GetSceneItemLockedRequest) (*obsgrpc.GetSceneItemLockedResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemLockedParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	resp, err := client.SceneItems.GetSceneItemLocked(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemLockedResponse{
		SceneItemLocked: resp.SceneItemLocked,
	}
	return result, nil
}
func (p *Proxy) SetSceneItemLocked(ctx context.Context, req *obsgrpc.SetSceneItemLockedRequest) (*obsgrpc.SetSceneItemLockedResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.SetSceneItemLockedParams{
		SceneName:       req.SceneName,
		SceneUuid:       req.SceneUUID,
		SceneItemId:     ptr((int)(req.SceneItemID)),
		SceneItemLocked: ptr(req.SceneItemLocked),
	}
	_, err = client.SceneItems.SetSceneItemLocked(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneItemLockedResponse{}
	return result, nil
}
func (p *Proxy) GetSceneItemIndex(ctx context.Context, req *obsgrpc.GetSceneItemIndexRequest) (*obsgrpc.GetSceneItemIndexResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemIndexParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	resp, err := client.SceneItems.GetSceneItemIndex(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemIndexResponse{
		SceneItemIndex: (int64)(resp.SceneItemIndex),
	}
	return result, nil
}
func (p *Proxy) SetSceneItemIndex(ctx context.Context, req *obsgrpc.SetSceneItemIndexRequest) (*obsgrpc.SetSceneItemIndexResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.SetSceneItemIndexParams{
		SceneName:      req.SceneName,
		SceneUuid:      req.SceneUUID,
		SceneItemId:    ptr((int)(req.SceneItemID)),
		SceneItemIndex: ptr((int)(req.SceneItemIndex)),
	}
	_, err = client.SceneItems.SetSceneItemIndex(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneItemIndexResponse{}
	return result, nil
}
func (p *Proxy) GetSceneItemBlendMode(ctx context.Context, req *obsgrpc.GetSceneItemBlendModeRequest) (*obsgrpc.GetSceneItemBlendModeResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.GetSceneItemBlendModeParams{
		SceneName:   req.SceneName,
		SceneUuid:   req.SceneUUID,
		SceneItemId: ptr((int)(req.SceneItemID)),
	}
	resp, err := client.SceneItems.GetSceneItemBlendMode(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneItemBlendModeResponse{
		SceneItemBlendMode: ([]byte)(resp.SceneItemBlendMode),
	}
	return result, nil
}
func (p *Proxy) SetSceneItemBlendMode(ctx context.Context, req *obsgrpc.SetSceneItemBlendModeRequest) (*obsgrpc.SetSceneItemBlendModeResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sceneitems.SetSceneItemBlendModeParams{
		SceneName:          req.SceneName,
		SceneUuid:          req.SceneUUID,
		SceneItemId:        ptr((int)(req.SceneItemID)),
		SceneItemBlendMode: ptr((string)(req.SceneItemBlendMode)),
	}
	_, err = client.SceneItems.SetSceneItemBlendMode(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneItemBlendModeResponse{}
	return result, nil
}
func (p *Proxy) GetSceneList(ctx context.Context, req *obsgrpc.GetSceneListRequest) (*obsgrpc.GetSceneListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.GetSceneListParams{}
	resp, err := client.Scenes.GetSceneList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneListResponse{
		CurrentProgramSceneName: resp.CurrentProgramSceneName,
		CurrentProgramSceneUUID: resp.CurrentProgramSceneUuid,
		CurrentPreviewSceneName: resp.CurrentPreviewSceneName,
		CurrentPreviewSceneUUID: resp.CurrentPreviewSceneUuid,
		Scenes:                  toAbstractObjects[*typedefs.Scene](resp.Scenes),
	}
	return result, nil
}
func (p *Proxy) GetGroupList(ctx context.Context, req *obsgrpc.GetGroupListRequest) (*obsgrpc.GetGroupListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.GetGroupListParams{}
	resp, err := client.Scenes.GetGroupList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetGroupListResponse{
		Groups: stringSlice2BytesSlice(resp.Groups),
	}
	return result, nil
}
func (p *Proxy) GetCurrentProgramScene(ctx context.Context, req *obsgrpc.GetCurrentProgramSceneRequest) (*obsgrpc.GetCurrentProgramSceneResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.GetCurrentProgramSceneParams{}
	resp, err := client.Scenes.GetCurrentProgramScene(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetCurrentProgramSceneResponse{
		SceneName:               resp.SceneName,
		SceneUUID:               resp.SceneUuid,
		CurrentProgramSceneName: resp.CurrentProgramSceneName,
		CurrentProgramSceneUUID: resp.CurrentProgramSceneUuid,
	}
	return result, nil
}
func (p *Proxy) SetCurrentProgramScene(ctx context.Context, req *obsgrpc.SetCurrentProgramSceneRequest) (*obsgrpc.SetCurrentProgramSceneResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.SetCurrentProgramSceneParams{
		SceneName: req.SceneName,
		SceneUuid: req.SceneUUID,
	}
	_, err = client.Scenes.SetCurrentProgramScene(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentProgramSceneResponse{}
	return result, nil
}
func (p *Proxy) GetCurrentPreviewScene(ctx context.Context, req *obsgrpc.GetCurrentPreviewSceneRequest) (*obsgrpc.GetCurrentPreviewSceneResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.GetCurrentPreviewSceneParams{}
	resp, err := client.Scenes.GetCurrentPreviewScene(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetCurrentPreviewSceneResponse{
		SceneName:               resp.SceneName,
		SceneUUID:               resp.SceneUuid,
		CurrentPreviewSceneName: resp.CurrentPreviewSceneName,
		CurrentPreviewSceneUUID: resp.CurrentPreviewSceneUuid,
	}
	return result, nil
}
func (p *Proxy) SetCurrentPreviewScene(ctx context.Context, req *obsgrpc.SetCurrentPreviewSceneRequest) (*obsgrpc.SetCurrentPreviewSceneResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.SetCurrentPreviewSceneParams{
		SceneName: req.SceneName,
		SceneUuid: req.SceneUUID,
	}
	_, err = client.Scenes.SetCurrentPreviewScene(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentPreviewSceneResponse{}
	return result, nil
}
func (p *Proxy) CreateScene(ctx context.Context, req *obsgrpc.CreateSceneRequest) (*obsgrpc.CreateSceneResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.CreateSceneParams{
		SceneName: ptr(req.SceneName),
	}
	resp, err := client.Scenes.CreateScene(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.CreateSceneResponse{
		SceneUUID: resp.SceneUuid,
	}
	return result, nil
}
func (p *Proxy) RemoveScene(ctx context.Context, req *obsgrpc.RemoveSceneRequest) (*obsgrpc.RemoveSceneResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.RemoveSceneParams{
		SceneName: req.SceneName,
		SceneUuid: req.SceneUUID,
	}
	_, err = client.Scenes.RemoveScene(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.RemoveSceneResponse{}
	return result, nil
}
func (p *Proxy) SetSceneName(ctx context.Context, req *obsgrpc.SetSceneNameRequest) (*obsgrpc.SetSceneNameResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.SetSceneNameParams{
		SceneName:    req.SceneName,
		SceneUuid:    req.SceneUUID,
		NewSceneName: ptr(req.NewSceneName),
	}
	_, err = client.Scenes.SetSceneName(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneNameResponse{}
	return result, nil
}
func (p *Proxy) GetSceneSceneTransitionOverride(ctx context.Context, req *obsgrpc.GetSceneSceneTransitionOverrideRequest) (*obsgrpc.GetSceneSceneTransitionOverrideResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.GetSceneSceneTransitionOverrideParams{
		SceneName: req.SceneName,
		SceneUuid: req.SceneUUID,
	}
	resp, err := client.Scenes.GetSceneSceneTransitionOverride(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneSceneTransitionOverrideResponse{
		TransitionName:     resp.TransitionName,
		TransitionDuration: (int64)(resp.TransitionDuration),
	}
	return result, nil
}
func (p *Proxy) SetSceneSceneTransitionOverride(ctx context.Context, req *obsgrpc.SetSceneSceneTransitionOverrideRequest) (*obsgrpc.SetSceneSceneTransitionOverrideResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &scenes.SetSceneSceneTransitionOverrideParams{
		SceneName:          req.SceneName,
		SceneUuid:          req.SceneUUID,
		TransitionName:     req.TransitionName,
		TransitionDuration: ptrInt64ToFloat64(req.TransitionDuration),
	}
	_, err = client.Scenes.SetSceneSceneTransitionOverride(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetSceneSceneTransitionOverrideResponse{}
	return result, nil
}
func (p *Proxy) GetSourceActive(ctx context.Context, req *obsgrpc.GetSourceActiveRequest) (*obsgrpc.GetSourceActiveResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sources.GetSourceActiveParams{
		SourceName: req.SourceName,
		SourceUuid: req.SourceUUID,
	}
	resp, err := client.Sources.GetSourceActive(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSourceActiveResponse{
		VideoActive:  resp.VideoActive,
		VideoShowing: resp.VideoShowing,
	}
	return result, nil
}
func (p *Proxy) GetSourceScreenshot(ctx context.Context, req *obsgrpc.GetSourceScreenshotRequest) (*obsgrpc.GetSourceScreenshotResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sources.GetSourceScreenshotParams{
		SourceName:              req.SourceName,
		SourceUuid:              req.SourceUUID,
		ImageFormat:             ptr((string)(req.ImageFormat)),
		ImageWidth:              ptrInt64ToFloat64(req.ImageWidth),
		ImageHeight:             ptrInt64ToFloat64(req.ImageHeight),
		ImageCompressionQuality: ptrInt64ToFloat64(req.ImageCompressionQuality),
	}
	resp, err := client.Sources.GetSourceScreenshot(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSourceScreenshotResponse{
		ImageData: ([]byte)(resp.ImageData),
	}
	return result, nil
}
func (p *Proxy) SaveSourceScreenshot(ctx context.Context, req *obsgrpc.SaveSourceScreenshotRequest) (*obsgrpc.SaveSourceScreenshotResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &sources.SaveSourceScreenshotParams{
		SourceName:              req.SourceName,
		SourceUuid:              req.SourceUUID,
		ImageFormat:             ptr((string)(req.ImageFormat)),
		ImageFilePath:           ptr(req.ImageFilePath),
		ImageWidth:              ptrInt64ToFloat64(req.ImageWidth),
		ImageHeight:             ptrInt64ToFloat64(req.ImageHeight),
		ImageCompressionQuality: ptrInt64ToFloat64(req.ImageCompressionQuality),
	}
	_, err = client.Sources.SaveSourceScreenshot(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SaveSourceScreenshotResponse{}
	return result, nil
}
func (p *Proxy) GetStreamStatus(ctx context.Context, req *obsgrpc.GetStreamStatusRequest) (*obsgrpc.GetStreamStatusResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &stream.GetStreamStatusParams{}
	resp, err := client.Stream.GetStreamStatus(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetStreamStatusResponse{
		OutputActive:        resp.OutputActive,
		OutputReconnecting:  resp.OutputReconnecting,
		OutputTimecode:      ([]byte)(resp.OutputTimecode),
		OutputDuration:      (int64)(resp.OutputDuration),
		OutputCongestion:    (int64)(resp.OutputCongestion),
		OutputBytes:         (int64)(resp.OutputBytes),
		OutputSkippedFrames: (int64)(resp.OutputSkippedFrames),
		OutputTotalFrames:   (int64)(resp.OutputTotalFrames),
	}
	return result, nil
}
func (p *Proxy) ToggleStream(ctx context.Context, req *obsgrpc.ToggleStreamRequest) (*obsgrpc.ToggleStreamResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &stream.ToggleStreamParams{}
	resp, err := client.Stream.ToggleStream(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.ToggleStreamResponse{
		OutputActive: resp.OutputActive,
	}
	return result, nil
}
func (p *Proxy) StartStream(ctx context.Context, req *obsgrpc.StartStreamRequest) (*obsgrpc.StartStreamResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &stream.StartStreamParams{}
	_, err = client.Stream.StartStream(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StartStreamResponse{}
	return result, nil
}
func (p *Proxy) StopStream(ctx context.Context, req *obsgrpc.StopStreamRequest) (*obsgrpc.StopStreamResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &stream.StopStreamParams{}
	_, err = client.Stream.StopStream(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.StopStreamResponse{}
	return result, nil
}
func (p *Proxy) SendStreamCaption(ctx context.Context, req *obsgrpc.SendStreamCaptionRequest) (*obsgrpc.SendStreamCaptionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &stream.SendStreamCaptionParams{
		CaptionText: ptr((string)(req.CaptionText)),
	}
	_, err = client.Stream.SendStreamCaption(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SendStreamCaptionResponse{}
	return result, nil
}
func (p *Proxy) GetTransitionKindList(ctx context.Context, req *obsgrpc.GetTransitionKindListRequest) (*obsgrpc.GetTransitionKindListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.GetTransitionKindListParams{}
	resp, err := client.Transitions.GetTransitionKindList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetTransitionKindListResponse{
		TransitionKinds: resp.TransitionKinds,
	}
	return result, nil
}
func (p *Proxy) GetSceneTransitionList(ctx context.Context, req *obsgrpc.GetSceneTransitionListRequest) (*obsgrpc.GetSceneTransitionListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.GetSceneTransitionListParams{}
	resp, err := client.Transitions.GetSceneTransitionList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetSceneTransitionListResponse{
		CurrentSceneTransitionName: resp.CurrentSceneTransitionName,
		CurrentSceneTransitionUUID: resp.CurrentSceneTransitionUuid,
		CurrentSceneTransitionKind: resp.CurrentSceneTransitionKind,
		Transitions:                toAbstractObjects[*typedefs.Transition](resp.Transitions),
	}
	return result, nil
}
func (p *Proxy) GetCurrentSceneTransition(ctx context.Context, req *obsgrpc.GetCurrentSceneTransitionRequest) (*obsgrpc.GetCurrentSceneTransitionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.GetCurrentSceneTransitionParams{}
	resp, err := client.Transitions.GetCurrentSceneTransition(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetCurrentSceneTransitionResponse{
		TransitionName:         resp.TransitionName,
		TransitionUUID:         resp.TransitionUuid,
		TransitionKind:         resp.TransitionKind,
		TransitionFixed:        resp.TransitionFixed,
		TransitionDuration:     (int64)(resp.TransitionDuration),
		TransitionConfigurable: resp.TransitionConfigurable,
		TransitionSettings:     toAbstractObject[map[string]any](resp.TransitionSettings),
	}
	return result, nil
}
func (p *Proxy) SetCurrentSceneTransition(ctx context.Context, req *obsgrpc.SetCurrentSceneTransitionRequest) (*obsgrpc.SetCurrentSceneTransitionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.SetCurrentSceneTransitionParams{
		TransitionName: ptr(req.TransitionName),
	}
	_, err = client.Transitions.SetCurrentSceneTransition(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentSceneTransitionResponse{}
	return result, nil
}
func (p *Proxy) SetCurrentSceneTransitionDuration(ctx context.Context, req *obsgrpc.SetCurrentSceneTransitionDurationRequest) (*obsgrpc.SetCurrentSceneTransitionDurationResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.SetCurrentSceneTransitionDurationParams{
		TransitionDuration: ptr((float64)(req.TransitionDuration)),
	}
	_, err = client.Transitions.SetCurrentSceneTransitionDuration(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentSceneTransitionDurationResponse{}
	return result, nil
}
func (p *Proxy) SetCurrentSceneTransitionSettings(ctx context.Context, req *obsgrpc.SetCurrentSceneTransitionSettingsRequest) (*obsgrpc.SetCurrentSceneTransitionSettingsResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.SetCurrentSceneTransitionSettingsParams{
		TransitionSettings: fromAbstractObject[map[string]any](req.TransitionSettings),
		Overlay:            req.Overlay,
	}
	_, err = client.Transitions.SetCurrentSceneTransitionSettings(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetCurrentSceneTransitionSettingsResponse{}
	return result, nil
}
func (p *Proxy) GetCurrentSceneTransitionCursor(ctx context.Context, req *obsgrpc.GetCurrentSceneTransitionCursorRequest) (*obsgrpc.GetCurrentSceneTransitionCursorResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.GetCurrentSceneTransitionCursorParams{}
	resp, err := client.Transitions.GetCurrentSceneTransitionCursor(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetCurrentSceneTransitionCursorResponse{
		TransitionCursor: (int64)(resp.TransitionCursor),
	}
	return result, nil
}
func (p *Proxy) TriggerStudioModeTransition(ctx context.Context, req *obsgrpc.TriggerStudioModeTransitionRequest) (*obsgrpc.TriggerStudioModeTransitionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.TriggerStudioModeTransitionParams{}
	_, err = client.Transitions.TriggerStudioModeTransition(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.TriggerStudioModeTransitionResponse{}
	return result, nil
}
func (p *Proxy) SetTBarPosition(ctx context.Context, req *obsgrpc.SetTBarPositionRequest) (*obsgrpc.SetTBarPositionResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &transitions.SetTBarPositionParams{
		Position: ptr((float64)(req.Position)),
		Release:  req.Release,
	}
	_, err = client.Transitions.SetTBarPosition(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetTBarPositionResponse{}
	return result, nil
}
func (p *Proxy) GetStudioModeEnabled(ctx context.Context, req *obsgrpc.GetStudioModeEnabledRequest) (*obsgrpc.GetStudioModeEnabledResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.GetStudioModeEnabledParams{}
	resp, err := client.Ui.GetStudioModeEnabled(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetStudioModeEnabledResponse{
		StudioModeEnabled: resp.StudioModeEnabled,
	}
	return result, nil
}
func (p *Proxy) SetStudioModeEnabled(ctx context.Context, req *obsgrpc.SetStudioModeEnabledRequest) (*obsgrpc.SetStudioModeEnabledResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.SetStudioModeEnabledParams{
		StudioModeEnabled: ptr(req.StudioModeEnabled),
	}
	_, err = client.Ui.SetStudioModeEnabled(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.SetStudioModeEnabledResponse{}
	return result, nil
}
func (p *Proxy) OpenInputPropertiesDialog(ctx context.Context, req *obsgrpc.OpenInputPropertiesDialogRequest) (*obsgrpc.OpenInputPropertiesDialogResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.OpenInputPropertiesDialogParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	_, err = client.Ui.OpenInputPropertiesDialog(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.OpenInputPropertiesDialogResponse{}
	return result, nil
}
func (p *Proxy) OpenInputFiltersDialog(ctx context.Context, req *obsgrpc.OpenInputFiltersDialogRequest) (*obsgrpc.OpenInputFiltersDialogResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.OpenInputFiltersDialogParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	_, err = client.Ui.OpenInputFiltersDialog(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.OpenInputFiltersDialogResponse{}
	return result, nil
}
func (p *Proxy) OpenInputInteractDialog(ctx context.Context, req *obsgrpc.OpenInputInteractDialogRequest) (*obsgrpc.OpenInputInteractDialogResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.OpenInputInteractDialogParams{
		InputName: req.InputName,
		InputUuid: req.InputUUID,
	}
	_, err = client.Ui.OpenInputInteractDialog(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.OpenInputInteractDialogResponse{}
	return result, nil
}
func (p *Proxy) GetMonitorList(ctx context.Context, req *obsgrpc.GetMonitorListRequest) (*obsgrpc.GetMonitorListResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.GetMonitorListParams{}
	resp, err := client.Ui.GetMonitorList(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.GetMonitorListResponse{
		Monitors: toAbstractObjects[*typedefs.Monitor](resp.Monitors),
	}
	return result, nil
}
func (p *Proxy) OpenVideoMixProjector(ctx context.Context, req *obsgrpc.OpenVideoMixProjectorRequest) (*obsgrpc.OpenVideoMixProjectorResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.OpenVideoMixProjectorParams{
		VideoMixType:      ptr((string)(req.VideoMixType)),
		MonitorIndex:      ptrInt64ToInt(req.MonitorIndex),
		ProjectorGeometry: ptr((string)(req.ProjectorGeometry)),
	}
	_, err = client.Ui.OpenVideoMixProjector(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.OpenVideoMixProjectorResponse{}
	return result, nil
}
func (p *Proxy) OpenSourceProjector(ctx context.Context, req *obsgrpc.OpenSourceProjectorRequest) (*obsgrpc.OpenSourceProjectorResponse, error) {
	client, onFinish, err := p.GetClient()
	if onFinish != nil {
		defer onFinish()
	}
	if err != nil {
		return nil, fmt.Errorf("unable to get a client: %w", err)
	}
	params := &ui.OpenSourceProjectorParams{
		SourceName:        req.SourceName,
		SourceUuid:        req.SourceUUID,
		MonitorIndex:      ptrInt64ToInt(req.MonitorIndex),
		ProjectorGeometry: ptr((string)(req.ProjectorGeometry)),
	}
	_, err = client.Ui.OpenSourceProjector(params)
	if err != nil {
		return nil, err
	}
	result := &obsgrpc.OpenSourceProjectorResponse{}
	return result, nil
}
